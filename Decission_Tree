{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "1. What is a Decision Tree, and how does it work?\n"
      ],
      "metadata": {
        "id": "i4jHH__nuDK1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "A **Decision Tree** is a popular machine learning algorithm used for both classification and regression tasks. It is a tree-like model that makes decisions by splitting data into subsets based on feature values, following a series of simple decision rules.\n",
        "\n",
        "### How a Decision Tree Works:\n",
        "\n",
        "1. **Root Node**: The decision tree starts with a root node, which represents the entire dataset. This node is then split into two or more branches based on the feature that best separates the data.\n",
        "\n",
        "2. **Splitting**: The algorithm selects the feature that results in the best division of data into subgroups. This is based on a certain criterion, such as **Gini impurity**, **Entropy** (for classification tasks), or **Mean Squared Error** (for regression tasks).\n",
        "\n",
        "3. **Decision Nodes**: Each branch or node in the tree represents a decision rule (e.g., \"Is Age > 30?\" or \"Is Income > 50k?\"). Each decision splits the dataset into smaller subsets based on the feature being tested.\n",
        "\n",
        "4. **Leaf Nodes**: The leaf nodes are the final nodes, where a decision is made. For classification problems, the leaf node assigns a class label (e.g., \"Yes\" or \"No\"). For regression tasks, the leaf node typically contains the average value of the target variable.\n",
        "\n",
        "5. **Pruning**: A decision tree might be too complex and overfit the data (i.e., it performs well on training data but poorly on unseen data). To avoid overfitting, trees can be pruned (removing branches or nodes that provide little additional value) to make them more general.\n",
        "\n"
      ],
      "metadata": {
        "id": "5W75LLCtuHAE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. What are impurity measures in Decision Trees?"
      ],
      "metadata": {
        "id": "IPYRlWJruW2z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Impurity measures are criteria used to determine how well a decision tree splits the data at each node. These measures help the algorithm choose the best feature to split on, based on how effectively it separates the data into homogeneous groups. The goal is to reduce impurity at each step, so the data in each branch becomes as pure (or homogenous) as possible with respect to the target variable.\n",
        "\n",
        "Here are the most commonly used **impurity measures** in decision trees:\n",
        "\n",
        "### 1. **Gini Impurity** (Mostly used in Classification)\n",
        "The **Gini impurity** is a measure of how often a randomly chosen element from the dataset would be incorrectly classified if it were randomly labeled according to the distribution of labels in the dataset.\n",
        "\n",
        "The formula for Gini impurity is:\n",
        "\n",
        "\\[\n",
        "\\text{Gini}(D) = 1 - \\sum_{i=1}^{k} p_i^2\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( D \\) is the dataset (or node).\n",
        "- \\( k \\) is the number of unique classes (labels).\n",
        "- \\( p_i \\) is the proportion of elements in class \\( i \\).\n",
        "\n",
        "#### Interpretation:\n",
        "- A **Gini score of 0** indicates that all elements in the node belong to a single class (perfect purity).\n",
        "- A **higher Gini score** (closer to 1) indicates greater impurity, with a mix of different classes.\n",
        "\n",
        "**Example**: If you have a binary classification problem where 60% of the instances are in class \"A\" and 40% are in class \"B,\" the Gini impurity would reflect this mixed distribution.\n",
        "\n",
        "### 2. **Entropy** (Mostly used in Classification)\n",
        "**Entropy** measures the uncertainty or disorder in the dataset. It is inspired by the concept of entropy in information theory, where the goal is to maximize the amount of information gained from splitting the dataset.\n",
        "\n",
        "The formula for **Entropy** is:\n",
        "\n",
        "\\[\n",
        "\\text{Entropy}(D) = -\\sum_{i=1}^{k} p_i \\log_2(p_i)\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( p_i \\) is the proportion of class \\( i \\) in the dataset \\( D \\).\n",
        "- \\( k \\) is the number of unique classes.\n",
        "\n",
        "#### Interpretation:\n",
        "- **Entropy = 0**: The node is pure (all instances belong to the same class).\n",
        "- **Entropy = 1**: The dataset is completely mixed (i.e., there's a 50-50 split between two classes).\n",
        "- The **goal** is to reduce entropy as much as possible, meaning each split should reduce uncertainty in predicting the target variable.\n",
        "\n",
        "**Example**: If the dataset has a 50-50 split between two classes, entropy will be 1, indicating maximum uncertainty. If one class dominates (e.g., 90% of instances are in class A), entropy will be lower.\n",
        "\n",
        "### 3. **Information Gain** (Mostly used with Entropy)\n",
        "**Information Gain** is the reduction in entropy after a dataset is split on a feature. It is the difference between the entropy of the original dataset and the weighted entropy of the resulting subsets.\n",
        "\n",
        "The formula for **Information Gain** is:\n",
        "\n",
        "\\[\n",
        "\\text{Information Gain}(D, A) = \\text{Entropy}(D) - \\sum_{v \\in A} \\frac{|D_v|}{|D|} \\text{Entropy}(D_v)\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( A \\) is a feature (attribute) used to split the data.\n",
        "- \\( D_v \\) is the subset of \\( D \\) where feature \\( A \\) takes value \\( v \\).\n",
        "- \\( |D_v| / |D| \\) is the proportion of instances in subset \\( D_v \\).\n",
        "\n",
        "#### Interpretation:\n",
        "- **Higher Information Gain** means the feature provides a better split, reducing uncertainty more effectively.\n",
        "- Information gain is used to determine which feature to split on at each step of the tree.\n",
        "\n",
        "### 4. **Mean Squared Error (MSE)** (Mostly used in Regression)\n",
        "For regression tasks, where the target variable is continuous, **Mean Squared Error (MSE)** is often used as the impurity measure. It calculates the average squared difference between the actual and predicted values.\n",
        "\n",
        "The formula for **MSE** is:\n",
        "\n",
        "\\[\n",
        "\\text{MSE}(D) = \\frac{1}{|D|} \\sum_{i=1}^{|D|} (y_i - \\hat{y})^2\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( y_i \\) is the true value of the target variable for instance \\( i \\).\n",
        "- \\( \\hat{y} \\) is the predicted value (usually the mean of the target variable for that node).\n",
        "- \\( |D| \\) is the number of instances in the dataset \\( D \\).\n",
        "\n",
        "#### Interpretation:\n",
        "- **Lower MSE** indicates better predictions (less error).\n",
        "- The goal is to minimize MSE during the tree-building process to ensure better accuracy of the regression model.\n",
        "\n",
        "### 5. **Variance Reduction** (Used in Regression)\n",
        "In regression tasks, another common impurity measure is **variance reduction**. The idea is to split the data in such a way that the variance within the resulting subsets is as low as possible.\n",
        "\n",
        "The formula for variance reduction is:\n",
        "\n",
        "\\[\n",
        "\\text{Variance Reduction} = \\text{Variance before split} - \\left( \\frac{N_1}{N} \\text{Variance}_1 + \\frac{N_2}{N} \\text{Variance}_2 \\right)\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( N_1 \\) and \\( N_2 \\) are the sizes of the two resulting subsets.\n",
        "- \\( \\text{Variance}_1 \\) and \\( \\text{Variance}_2 \\) are the variances within each subset.\n",
        "\n",
        "#### Interpretation:\n",
        "- **High variance reduction** means that the split significantly improves the homogeneity of the target variable in the resulting subsets.\n"
      ],
      "metadata": {
        "id": "ag4MUY8oucyy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. What is the mathematical formula for Gini Impurity?"
      ],
      "metadata": {
        "id": "o_RWMCsRur-G"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The **Gini Impurity** is a measure used in decision trees to evaluate how often a randomly chosen element would be misclassified, based on the distribution of classes in a node. It helps in choosing the best split for classification problems.\n",
        "\n",
        "The mathematical formula for **Gini Impurity** is:\n",
        "\n",
        "\\[\n",
        "\\text{Gini}(D) = 1 - \\sum_{i=1}^{k} p_i^2\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( D \\) is the dataset (or node).\n",
        "- \\( k \\) is the number of unique classes (labels).\n",
        "- \\( p_i \\) is the proportion of elements in class \\( i \\) within the dataset \\( D \\).\n"
      ],
      "metadata": {
        "id": "of3qG5PKux9Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. What is the mathematical formula for Entropy?"
      ],
      "metadata": {
        "id": "_gM0o3UrvFKI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The mathematical formula for **Entropy** is based on the concept from information theory, where entropy measures the uncertainty or disorder in a dataset. It quantifies the amount of unpredictability in the target variable. In the context of decision trees, it helps to decide the best feature to split on by looking for the split that reduces entropy the most.\n",
        "\n",
        "### Formula for Entropy:\n",
        "\n",
        "\\[\n",
        "\\text{Entropy}(D) = - \\sum_{i=1}^{k} p_i \\log_2(p_i)\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( D \\) is the dataset (or node).\n",
        "- \\( k \\) is the number of unique classes (labels) in the dataset.\n",
        "- \\( p_i \\) is the proportion of elements in class \\( i \\) in the dataset \\( D \\).\n",
        "- The logarithm is base 2 because we're measuring entropy in **bits**.\n",
        "\n",
        "\n",
        "  \n",
        "In decision trees, the goal is to **minimize entropy** after each split, so the algorithm looks for the feature that best reduces the uncertainty in the target variable."
      ],
      "metadata": {
        "id": "6LolibJMvWXf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. What is Information Gain, and how is it used in Decision Trees?"
      ],
      "metadata": {
        "id": "zK_pxarRvlCI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Information Gain** in Decision Trees\n",
        "\n",
        "**Information Gain (IG)** is a metric used to measure the effectiveness of a feature in classifying a dataset. In decision trees, it quantifies the reduction in **uncertainty** (or **entropy**) when the data is split based on a particular feature. The goal is to select the feature that provides the greatest reduction in entropy, which helps in making the best split.\n",
        "\n",
        "### **Mathematical Formula for Information Gain:**\n",
        "\n",
        "The formula for **Information Gain** is:\n",
        "\n",
        "\\[\n",
        "\\text{Information Gain}(D, A) = \\text{Entropy}(D) - \\sum_{v \\in A} \\frac{|D_v|}{|D|} \\text{Entropy}(D_v)\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( D \\) is the dataset (or node).\n",
        "- \\( A \\) is the feature on which we're splitting the dataset.\n",
        "- \\( |D_v| \\) is the size of the subset of the data where feature \\( A \\) takes value \\( v \\).\n",
        "- \\( |D| \\) is the total number of instances in the dataset \\( D \\).\n",
        "- \\( \\text{Entropy}(D) \\) is the entropy of the entire dataset.\n",
        "- \\( \\text{Entropy}(D_v) \\) is the entropy of the subset of the dataset where feature \\( A \\) takes value \\( v \\).\n",
        "  \n",
        "### **Steps to Calculate Information Gain:**\n",
        "\n",
        "1. **Calculate the Entropy of the Entire Dataset**: First, find the entropy of the entire dataset, \\( \\text{Entropy}(D) \\). This quantifies the uncertainty in the dataset before any split.\n",
        "\n",
        "2. **Split the Dataset Based on Feature \\( A \\)**: For each feature \\( A \\), split the dataset into subsets based on the values of that feature. For example, if feature \\( A \\) is \"Age\", the subsets could be \\( A = \\{ \\text{young}, \\text{middle-aged}, \\text{old} \\} \\).\n",
        "\n",
        "3. **Calculate the Entropy for Each Subset**: Compute the entropy for each of these subsets, \\( \\text{Entropy}(D_v) \\), where \\( v \\) is the value of the feature.\n",
        "\n",
        "4. **Compute the Weighted Sum of Entropies**: For each subset, compute the weighted sum of its entropy, where the weight is the proportion of instances in that subset relative to the entire dataset.\n",
        "\n",
        "5. **Subtract the Weighted Entropies from the Original Entropy**: Subtract the weighted sum of the entropies from the entropy of the entire dataset to get the **Information Gain**.\n",
        "\n",
        "### **Example:**\n",
        "\n",
        "Let's go through a simple example to illustrate how Information Gain works.\n",
        "\n",
        "#### Given Dataset:\n",
        "\n",
        "Suppose you have a dataset of 10 instances with a binary classification task (e.g., predicting whether a person buys a product: **Yes** or **No**). The features are \"Age\" (categorical: \"Young\", \"Old\") and the target variable is \"Buy\" (binary: \"Yes\", \"No\").\n",
        "\n",
        "| Age   | Buy   |\n",
        "|-------|-------|\n",
        "| Young | Yes   |\n",
        "| Young | No    |\n",
        "| Young | Yes   |\n",
        "| Old   | Yes   |\n",
        "| Old   | No    |\n",
        "| Old   | No    |\n",
        "| Old   | Yes   |\n",
        "| Young | No    |\n",
        "| Young | Yes   |\n",
        "| Old   | Yes   |\n",
        "\n",
        "#### Step 1: Calculate the Entropy of the Entire Dataset\n",
        "\n",
        "First, calculate the entropy for the **entire dataset**. There are 10 instances, with 6 instances of \"Yes\" and 4 instances of \"No.\"\n",
        "\n",
        "\\[\n",
        "p_{\\text{Yes}} = \\frac{6}{10} = 0.6, \\quad p_{\\text{No}} = \\frac{4}{10} = 0.4\n",
        "\\]\n",
        "\n",
        "The entropy for the whole dataset is:\n",
        "\n",
        "\\[\n",
        "\\text{Entropy}(D) = - (0.6 \\log_2(0.6) + 0.4 \\log_2(0.4)) = 0.971\n",
        "\\]\n",
        "\n",
        "#### Step 2: Split the Dataset by \"Age\"\n",
        "\n",
        "Now, split the dataset by the \"Age\" feature. We have two subsets:\n",
        "\n",
        "- **Young** (Age = Young): 5 instances, with 3 \"Yes\" and 2 \"No\".\n",
        "- **Old** (Age = Old): 5 instances, with 3 \"Yes\" and 2 \"No\".\n",
        "\n",
        "#### Step 3: Calculate the Entropy for Each Subset\n",
        "\n",
        "For the **Young** subset:\n",
        "\\[\n",
        "p_{\\text{Yes}} = \\frac{3}{5} = 0.6, \\quad p_{\\text{No}} = \\frac{2}{5} = 0.4\n",
        "\\]\n",
        "\\[\n",
        "\\text{Entropy(Young)} = - (0.6 \\log_2(0.6) + 0.4 \\log_2(0.4)) = 0.971\n",
        "\\]\n",
        "\n",
        "For the **Old** subset:\n",
        "\\[\n",
        "p_{\\text{Yes}} = \\frac{3}{5} = 0.6, \\quad p_{\\text{No}} = \\frac{2}{5} = 0.4\n",
        "\\]\n",
        "\\[\n",
        "\\text{Entropy(Old)} = - (0.6 \\log_2(0.6) + 0.4 \\log_2(0.4)) = 0.971\n",
        "\\]\n",
        "\n",
        "#### Step 4: Calculate the Information Gain\n",
        "\n",
        "Now, calculate the **Information Gain** for splitting on \"Age\":\n",
        "\n",
        "\\[\n",
        "\\text{Information Gain}(D, \\text{Age}) = \\text{Entropy}(D) - \\left( \\frac{5}{10} \\times \\text{Entropy(Young)} + \\frac{5}{10} \\times \\text{Entropy(Old)} \\right)\n",
        "\\]\n",
        "\n",
        "\\[\n",
        "\\text{Information Gain}(D, \\text{Age}) = 0.971 - \\left( 0.5 \\times 0.971 + 0.5 \\times 0.971 \\right)\n",
        "\\]\n",
        "\n",
        "\\[\n",
        "\\text{Information Gain}(D, \\text{Age}) = 0.971 - 0.971 = 0\n",
        "\\]\n",
        "\n",
        "In this case, the **Information Gain** for the \"Age\" feature is **0**, meaning it doesn't help in reducing uncertainty.\n",
        "\n",
        "### **Why Use Information Gain?**\n",
        "\n",
        "In decision trees, the goal is to split the data in a way that maximizes the reduction in entropy, leading to a more predictable and pure dataset. **Information Gain** helps to identify which feature gives the best split. The feature with the highest **Information Gain** will be selected for the decision tree node, as it results in the greatest reduction in uncertainty.\n",
        "\n",
        "- **High Information Gain** indicates that the feature significantly reduces uncertainty and makes the dataset more pure.\n",
        "- **Low or Zero Information Gain** suggests that the feature does not provide much information about the target variable and should not be used for splitting.\n",
        "\n",
        "### **Key Points:**\n",
        "- **Information Gain** is used to measure the effectiveness of a feature in classifying the data.\n",
        "- It is based on the reduction of **entropy** after a split.\n",
        "- The feature with the highest **Information Gain** is selected to split the dataset at each step in building the decision tree.\n"
      ],
      "metadata": {
        "id": "1fhq6x6KvrXq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. What is the difference between Gini Impurity and Entropy?"
      ],
      "metadata": {
        "id": "02BeFq7kwDSk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Gini Impurity** and **Entropy** are both impurity measures used in decision trees to determine the best feature to split on. While they serve the same purpose (to evaluate how well a particular feature separates the data), they differ in their mathematical formulation, interpretation, and behavior.\n",
        "\n",
        "Here’s a breakdown of the differences between **Gini Impurity** and **Entropy**:\n",
        "\n",
        "### 1. **Mathematical Formula**\n",
        "\n",
        "- **Gini Impurity**:\n",
        "  \\[\n",
        "  \\text{Gini}(D) = 1 - \\sum_{i=1}^{k} p_i^2\n",
        "  \\]\n",
        "  Where:\n",
        "  - \\( p_i \\) is the proportion of instances of class \\( i \\) in dataset \\( D \\).\n",
        "  - \\( k \\) is the number of classes in the target variable.\n",
        "\n",
        "- **Entropy**:\n",
        "  \\[\n",
        "  \\text{Entropy}(D) = - \\sum_{i=1}^{k} p_i \\log_2(p_i)\n",
        "  \\]\n",
        "  Where:\n",
        "  - \\( p_i \\) is the proportion of instances of class \\( i \\) in dataset \\( D \\).\n",
        "  - \\( k \\) is the number of classes in the target variable.\n",
        "\n",
        "### 2. **Range of Values**\n",
        "\n",
        "- **Gini Impurity**:\n",
        "  - The range of Gini is from **0** to **1**.\n",
        "  - **Gini = 0** means that the node is pure (all instances belong to the same class).\n",
        "  - **Gini = 1** indicates maximum impurity, i.e., all classes are equally distributed.\n",
        "\n",
        "- **Entropy**:\n",
        "  - The range of entropy is from **0** to **log2(k)** (where \\( k \\) is the number of classes).\n",
        "  - **Entropy = 0** means the node is pure (all instances belong to the same class).\n",
        "  - **Entropy = log2(k)** indicates maximum disorder (equal distribution of all classes).\n",
        "  \n",
        "  For a binary classification problem, the maximum entropy is 1 (log2(2) = 1).\n",
        "\n",
        "### 3. **Interpretation**\n",
        "\n",
        "- **Gini Impurity**: Measures the **probability of misclassifying a randomly chosen element** if it were randomly assigned a class according to the distribution of the classes in the node.\n",
        "  - It is less sensitive to changes in class distribution when classes are imbalanced.\n",
        "  - More straightforward and computationally simpler to calculate.\n",
        "\n",
        "- **Entropy**: Measures the **amount of disorder or uncertainty** in the dataset. Higher entropy means more mixed classes, and lower entropy means a more homogenous dataset.\n",
        "  - More sensitive to the presence of less frequent classes.\n",
        "  - Involves logarithms, making it computationally more expensive than Gini, especially in large datasets.\n",
        "\n",
        "### 4. **Behavior and Sensitivity**\n",
        "\n",
        "- **Gini Impurity**:\n",
        "  - Tends to favor the larger classes when making splits, since it focuses on the probability of misclassification.\n",
        "  - Slightly more biased towards pure splits, which can sometimes lead to slightly better performance when building decision trees.\n",
        "\n",
        "- **Entropy**:\n",
        "  - More sensitive to changes in the class distribution. It behaves in a more \"balanced\" manner by considering both the number of instances in each class and their distribution.\n",
        "  - Slightly more complex, as it uses logarithms, but in practice, this doesn’t have a large impact on performance compared to Gini.\n",
        "\n",
        "### 5. **Speed of Calculation**\n",
        "\n",
        "- **Gini Impurity**:\n",
        "  - **Faster** to compute because it doesn’t involve logarithmic calculations.\n",
        "  \n",
        "- **Entropy**:\n",
        "  - **Slower** to compute due to the use of logarithmic functions.\n",
        "\n",
        "### 6. **Usage in Decision Trees**\n",
        "\n",
        "- **Gini Impurity** is typically used in the **CART (Classification and Regression Trees)** algorithm, which is one of the most widely used decision tree algorithms.\n",
        "  \n",
        "- **Entropy** is used in the **ID3 (Iterative Dichotomiser 3)** algorithm and is the basis for the **C4.5** and **C5.0** algorithms.\n",
        "\n",
        "### 7. **Performance Differences**\n",
        "\n",
        "In practice, **both Gini Impurity and Entropy** lead to very similar decision trees and often produce similar results in terms of classification accuracy. However:\n",
        "- **Gini** tends to create trees that are **slightly deeper**, but with fewer nodes.\n",
        "- **Entropy** may produce slightly **more balanced splits**, leading to more balanced trees.\n",
        "\n",
        "### Summary Table\n",
        "\n",
        "| **Feature**              | **Gini Impurity**                                        | **Entropy**                                         |\n",
        "|--------------------------|----------------------------------------------------------|-----------------------------------------------------|\n",
        "| **Formula**              | \\( 1 - \\sum p_i^2 \\)                                     | \\( - \\sum p_i \\log_2(p_i) \\)                        |\n",
        "| **Range**                | 0 to 1 (for binary classification)                       | 0 to log2(k) (where \\( k \\) is the number of classes)|\n",
        "| **Interpretation**       | Probability of misclassification                         | Amount of disorder/uncertainty in the dataset       |\n",
        "| **Sensitivity**          | Less sensitive to class imbalances                       | More sensitive to class imbalances                  |\n",
        "| **Computation**          | Faster, simpler computation                              | Slower due to logarithms                            |\n",
        "| **Behavior**             | Bias toward pure nodes                                   | More balanced and nuanced splits                    |\n",
        "| **Used in**              | CART (Classification and Regression Trees)              | ID3, C4.5, C5.0                                      |\n",
        "\n",
        "### Which One to Use?\n",
        "\n",
        "- **Gini Impurity** is often preferred in practice because it is faster to compute and works well in most situations. It's widely used in libraries like **Scikit-learn** for decision tree algorithms.\n",
        "  \n",
        "- **Entropy** might be preferred if you want to focus more on handling imbalances or when using algorithms like **C4.5**.\n",
        "\n",
        "In general, both methods produce **similar performance** in decision trees, and the choice often comes down to implementation preferences or minor performance improvements."
      ],
      "metadata": {
        "id": "0BaSqpvBwK36"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. What is the mathematical explanation behind Decision Trees?"
      ],
      "metadata": {
        "id": "JwHHSTB8wSkU"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Mathematical Explanation Behind Decision Trees\n",
        "\n",
        "A **Decision Tree** is a supervised machine learning model that recursively splits data into subsets based on certain feature values. The primary goal of a decision tree is to predict the target variable (class label for classification or continuous value for regression) by learning simple decision rules from the data features.\n",
        "\n",
        "Let's break down the mathematical foundation of how decision trees are constructed and how they function.\n",
        "\n",
        "---\n",
        "\n",
        "### 1. **Structure of a Decision Tree**\n",
        "A decision tree consists of the following elements:\n",
        "- **Root Node**: The topmost node that represents the entire dataset. It contains the initial feature used to split the data.\n",
        "- **Internal Nodes**: These nodes represent the decision-making points where the data is split based on certain features.\n",
        "- **Leaf Nodes**: The terminal nodes where the predictions (class labels for classification or continuous values for regression) are made.\n",
        "\n",
        "Mathematically, at each internal node, a decision is made based on a **feature** \\( X_i \\), and a **threshold** \\( t_i \\). This decision will either:\n",
        "- Split the dataset into subsets where \\( X_i \\leq t_i \\) or \\( X_i > t_i \\) (for continuous features).\n",
        "- Or partition the data based on discrete values of \\( X_i \\) (for categorical features).\n",
        "\n",
        "### 2. **Splitting Criteria (Impurity Measures)**\n",
        "The goal is to split the data in such a way that the subsets become as **pure** as possible (i.e., homogeneous with respect to the target variable).\n",
        "\n",
        "To achieve this, we use **impurity measures** at each node, and the most common measures are **Gini Impurity** and **Entropy**.\n",
        "\n",
        "#### **Gini Impurity (for Classification)**\n",
        "\n",
        "At each node, the Gini Impurity is calculated as:\n",
        "\n",
        "\\[\n",
        "\\text{Gini}(D) = 1 - \\sum_{i=1}^{k} p_i^2\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( D \\) is the dataset at a particular node.\n",
        "- \\( k \\) is the number of classes.\n",
        "- \\( p_i \\) is the proportion of instances in class \\( i \\).\n",
        "\n",
        "The decision tree aims to minimize Gini Impurity by choosing splits that result in nodes with lower impurity.\n",
        "\n",
        "#### **Entropy (for Classification)**\n",
        "\n",
        "Entropy is another measure of uncertainty. The entropy for a node \\( D \\) is given by:\n",
        "\n",
        "\\[\n",
        "\\text{Entropy}(D) = - \\sum_{i=1}^{k} p_i \\log_2(p_i)\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( p_i \\) is the proportion of instances in class \\( i \\).\n",
        "\n",
        "The decision tree algorithm aims to minimize the **Information Gain**, which is the reduction in entropy after the split.\n",
        "\n",
        "### 3. **Information Gain (for Classification)**\n",
        "Information Gain quantifies the reduction in uncertainty (entropy) when the data is split based on a feature. It is defined as:\n",
        "\n",
        "\\[\n",
        "\\text{Information Gain}(D, A) = \\text{Entropy}(D) - \\sum_{v \\in A} \\frac{|D_v|}{|D|} \\text{Entropy}(D_v)\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( A \\) is the feature on which we split the dataset.\n",
        "- \\( D_v \\) represents the subset of data where feature \\( A \\) has value \\( v \\).\n",
        "\n",
        "A higher Information Gain indicates that the feature helps in classifying the data better, thus the tree selects that feature for the split.\n",
        "\n",
        "### 4. **How the Decision Tree Chooses Features to Split**\n",
        "At each node, the decision tree algorithm evaluates all available features and their potential splits to **minimize the impurity**. For classification problems, this is done using either **Gini Impurity** or **Entropy**.\n",
        "\n",
        "- **Gini Impurity** or **Entropy** is calculated for each possible split (based on each feature and threshold).\n",
        "- The **feature and threshold** that lead to the **lowest impurity** (or highest Information Gain) are selected as the split criterion for that node.\n",
        "- This process is repeated recursively for each child node until a stopping criterion is met (e.g., the tree reaches a specified depth, the node becomes pure, or a minimum number of samples is reached).\n",
        "\n",
        "### 5. **Regression Trees**\n",
        "In the case of regression, the target variable is continuous, and the decision tree is used to predict a continuous value. For regression trees, the following is used:\n",
        "\n",
        "#### **Mean Squared Error (MSE) as Impurity Measure:**\n",
        "At each node, the decision tree aims to minimize the **Mean Squared Error (MSE)** of the predictions. The MSE for a set of values \\( y_1, y_2, \\dots, y_n \\) is defined as:\n",
        "\n",
        "\\[\n",
        "\\text{MSE} = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y})^2\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( y_i \\) is the actual value.\n",
        "- \\( \\hat{y} \\) is the predicted value (the mean of the target values in the node).\n",
        "\n",
        "In the case of regression trees:\n",
        "- The decision tree splits the dataset to minimize the variance (or equivalently, the MSE) within each child node.\n",
        "\n",
        "### 6. **Recursive Tree Building**\n",
        "The decision tree algorithm builds the tree in a recursive, top-down manner:\n",
        "1. Start with the **root node** containing the entire dataset.\n",
        "2. Evaluate all possible splits based on the features and thresholds, and choose the one that minimizes the chosen impurity measure.\n",
        "3. Recursively apply the same process to each child node.\n",
        "4. Repeat until a stopping condition is met.\n",
        "\n",
        "The **stopping conditions** may include:\n",
        "- A node reaches a predefined **depth**.\n",
        "- A node contains fewer than a minimum number of instances.\n",
        "- The node is pure (i.e., all instances belong to the same class).\n",
        "\n",
        "### 7. **Pruning the Tree**\n",
        "After building a decision tree, it may be necessary to **prune** it to avoid overfitting. Overfitting occurs when the tree becomes too complex and fits the noise in the data rather than the true underlying pattern. Pruning methods remove nodes or subtrees that do not provide significant improvement to the model's performance.\n",
        "\n",
        "**Cost-Complexity Pruning** is a commonly used method, where:\n",
        "- A parameter \\( \\alpha \\) is used to control the trade-off between tree depth and model complexity. The objective is to minimize the **cost-complexity** function:\n",
        "\n",
        "\\[\n",
        "\\text{Cost Complexity} = \\text{MSE} + \\alpha \\times \\text{(Number of Nodes)}\n",
        "\\]\n",
        "\n",
        "Where:\n",
        "- \\( \\alpha \\) is the pruning parameter that balances the trade-off between complexity and model accuracy.\n",
        "\n",
        "### 8. **Decision Boundary**\n",
        "For classification problems, the decision tree partitions the feature space into distinct regions, and each region corresponds to a class label. The boundaries between these regions are defined by the splits made in the tree. The decision boundary is the surface where the class label changes.\n",
        "\n",
        "### Summary of Decision Tree Algorithm:\n",
        "1. **Choose a feature** to split on using a measure like Gini Impurity or Entropy (or MSE for regression).\n",
        "2. **Split the dataset** into two or more subsets based on the feature.\n",
        "3. **Repeat the process** recursively for each subset until one of the stopping conditions is met (e.g., all instances in a node belong to the same class or a predefined depth is reached).\n",
        "4. **Prune the tree** to remove unnecessary complexity if overfitting occurs.\n",
        "\n",
        "In essence, **decision trees** are recursive, binary splits that aim to reduce uncertainty at each node by choosing features that best separate the data."
      ],
      "metadata": {
        "id": "Lv9pOA5iwX4Z"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. What is Pre-Pruning in Decision Trees?"
      ],
      "metadata": {
        "id": "bUrIfbaAwnF_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Pre-Pruning in Decision Trees**\n",
        "\n",
        "**Pre-pruning** (also known as **early stopping**) is a technique used in decision trees to **prevent overfitting** by stopping the tree construction process **before** it reaches its full depth. The goal of pre-pruning is to ensure that the tree does not grow too complex by limiting the number of splits or nodes it can create. By doing so, it reduces the chances of fitting the model too closely to the training data (i.e., overfitting), which can lead to poor generalization on unseen data.\n",
        "\n",
        "In pre-pruning, you set certain **criteria** that, if met, will stop further growth of the tree. These criteria usually involve restricting the depth of the tree, the number of samples per leaf, or the purity of the nodes.\n"
      ],
      "metadata": {
        "id": "_OAxjg2Rwsc2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. What is Post-Pruning in Decision Trees?"
      ],
      "metadata": {
        "id": "ckLDB1C9xHZB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Post-Pruning in Decision Trees**\n",
        "\n",
        "**Post-pruning**, also known as **cost-complexity pruning** or **weakest link pruning**, is a technique used in decision trees to **remove branches** or **subtrees** that do not significantly contribute to the predictive power of the tree. This process is applied **after** the decision tree has been fully grown and aims to **simplify** the tree, thereby **preventing overfitting** and improving generalization.\n",
        "\n",
        "Unlike **pre-pruning**, which stops the tree-building process early, post-pruning allows the tree to grow to its full depth and complexity first, then prunes it back to remove unnecessary complexity.\n",
        "\n"
      ],
      "metadata": {
        "id": "MYm7il7kxQvn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. What is the difference between Pre-Pruning and Post-Pruning?\n"
      ],
      "metadata": {
        "id": "6ZZ9h3ezxmlm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Difference Between Pre-Pruning and Post-Pruning in Decision Trees**\n",
        "\n",
        "**Pre-pruning** and **post-pruning** are two techniques used to prevent overfitting in decision trees, but they differ in when the pruning process is applied and how it works. Let's break down the key differences:\n",
        "\n",
        "---\n",
        "\n",
        "### 1. **When the Pruning Occurs**\n",
        "\n",
        "- **Pre-Pruning** (also known as **early stopping**):\n",
        "  - **Pruning happens during the tree-building process**.\n",
        "  - The tree-building process is stopped before it reaches its full depth or complexity, based on specific predefined criteria.\n",
        "  - This is done while the tree is still being constructed, effectively limiting its size from the outset.\n",
        "\n",
        "- **Post-Pruning** (also known as **cost-complexity pruning** or **weakest link pruning**):\n",
        "  - **Pruning happens after the tree has been fully built**.\n",
        "  - The decision tree is allowed to grow to its full size, and then it is pruned back by removing unnecessary branches that don't contribute much to the predictive accuracy.\n",
        "\n",
        "---\n",
        "\n",
        "### 2. **How the Pruning Works**\n",
        "\n",
        "- **Pre-Pruning**:\n",
        "  - The tree-building process is halted early based on certain conditions such as:\n",
        "    - **Maximum depth** (the maximum number of levels in the tree).\n",
        "    - **Minimum samples per leaf** (the minimum number of samples required in a leaf node).\n",
        "    - **Minimum samples per split** (the minimum number of samples required to split a node).\n",
        "    - **Maximum number of leaf nodes** (a limit on the number of leaf nodes).\n",
        "    - **Impurity threshold** (if further splitting doesn't reduce impurity enough).\n",
        "  \n",
        "  - If any of these conditions are met during the tree construction, further splitting stops, and a node is turned into a leaf node.\n",
        "  \n",
        "- **Post-Pruning**:\n",
        "  - The tree is fully grown first (without stopping the growth) and then **pruned** by removing nodes or branches that have little to no impact on improving the model’s accuracy.\n",
        "  - This is typically done by evaluating the impact of removing each node, considering the trade-off between tree complexity and predictive performance.\n",
        "  - **Cost-complexity pruning** (or weakest link pruning) is often used, where a parameter \\( \\alpha \\) controls the balance between tree complexity and error rate. If removing a subtree improves the overall model performance, it gets pruned.\n",
        "\n",
        "---\n",
        "\n",
        "### 3. **Impact on the Tree's Complexity**\n",
        "\n",
        "- **Pre-Pruning**:\n",
        "  - Limits the complexity of the tree **before it has a chance to overfit**.\n",
        "  - It may result in **underfitting** if the tree is pruned too early (i.e., if the tree is too simple to capture the true patterns in the data).\n",
        "  - The resulting tree is often **simpler and more interpretable** from the beginning.\n",
        "\n",
        "- **Post-Pruning**:\n",
        "  - Allows the tree to grow large and **fit the data fully** first, but then attempts to reduce its size by removing unimportant parts.\n",
        "  - It may avoid **underfitting** by building a tree that is capable of capturing all the relevant patterns in the data, but then simplifies it to improve generalization.\n",
        "  - The final tree is typically **smaller** and **less complex** than the fully grown one, but may still be more accurate than a pre-pruned tree.\n",
        "\n",
        "---\n",
        "\n",
        "### 4. **Risk of Overfitting**\n",
        "\n",
        "- **Pre-Pruning**:\n",
        "  - The risk of **overfitting is reduced** because the tree is restricted in terms of its growth.\n",
        "  - However, if the pruning criteria are too strict, the tree may **underfit** the data (i.e., it may fail to capture important patterns).\n",
        "  \n",
        "- **Post-Pruning**:\n",
        "  - Post-pruning allows for the tree to grow fully, capturing all the complexities in the data.\n",
        "  - It helps reduce **overfitting** by removing unnecessary branches after the tree has learned all the patterns, thus leading to a more generalized model.\n",
        "\n",
        "---\n",
        "\n",
        "### 5. **Ease of Implementation**\n",
        "\n",
        "- **Pre-Pruning**:\n",
        "  - Pre-pruning is easier and faster to implement because you define criteria before the tree-building process starts, and the algorithm simply stops growing the tree when these criteria are met.\n",
        "  - The complexity is managed from the beginning.\n",
        "\n",
        "- **Post-Pruning**:\n",
        "  - Post-pruning is more **computationally expensive** because it involves building a fully grown tree first and then evaluating multiple subtrees for pruning.\n",
        "  - It is a more sophisticated technique that requires assessing the performance of different pruned trees, often using **cross-validation** or a similar method to choose the best pruned tree.\n",
        "\n",
        "---\n",
        "\n",
        "### 6. **Control Over the Tree Size**\n",
        "\n",
        "- **Pre-Pruning**:\n",
        "  - Gives **direct control** over the tree's size and complexity through hyperparameters like `max_depth`, `min_samples_split`, `min_samples_leaf`, etc.\n",
        "  - You set boundaries before the tree grows, which may make the model less flexible.\n",
        "\n",
        "- **Post-Pruning**:\n",
        "  - Allows the tree to grow and then **adjust its size** based on performance, leading to a better balance between complexity and accuracy.\n",
        "  - It adjusts the model’s size based on the actual data and performance metrics.\n",
        "\n",
        "---\n",
        "\n",
        "### 7. **Example Criteria for Pre-Pruning vs. Post-Pruning**\n",
        "\n",
        "- **Pre-Pruning**:\n",
        "  - **Maximum Depth**: You set a limit on how deep the tree can grow.\n",
        "  - **Minimum Samples per Split**: You specify the minimum number of samples required to perform a split.\n",
        "  - **Minimum Samples per Leaf**: You specify the minimum number of samples required for a leaf node.\n",
        "  - **Maximum Leaf Nodes**: You specify the maximum number of terminal nodes.\n",
        "\n",
        "- **Post-Pruning**:\n",
        "  - **Cost-Complexity Pruning**: The tree is grown fully, and then branches are removed based on a trade-off between tree complexity and error rate.\n",
        "  - **Cross-Validation**: Often used to decide which pruned version of the tree gives the best performance on unseen data.\n",
        "\n",
        "---\n",
        "\n",
        "### **Summary of Key Differences**\n",
        "\n",
        "| **Aspect**               | **Pre-Pruning**                           | **Post-Pruning**                           |\n",
        "|--------------------------|-------------------------------------------|--------------------------------------------|\n",
        "| **When pruning happens**  | During tree construction (early stopping) | After the tree has fully grown             |\n",
        "| **Complexity control**    | Set before the tree is built (limits growth) | Pruned after tree is built (adjusts complexity) |\n",
        "| **Risk of Overfitting**   | Reduced overfitting, but may cause underfitting | Reduces overfitting by pruning unnecessary branches |\n",
        "| **Implementation Ease**   | Easier and faster to implement            | More computationally expensive            |\n",
        "| **Tree Growth**           | Limited from the start (simpler)          | Fully grown first, then pruned (more flexible) |\n",
        "| **Model Interpretation**  | Simpler, but may underfit                 | Can be more accurate and flexible          |\n",
        "\n"
      ],
      "metadata": {
        "id": "Q02Nf9wkxtZa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. What is a Decision Tree Regressor?"
      ],
      "metadata": {
        "id": "FbpacfzRyHQZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Decision Tree Regressor**\n",
        "\n",
        "A **Decision Tree Regressor** is a type of **decision tree** model used for **regression tasks**, where the goal is to predict continuous numerical values. Unlike **classification trees** (which predict categorical labels), a **decision tree regressor** splits the data into regions (or leaves) based on input features and uses the mean (or another statistic) of the target variable (dependent variable) in each region to make predictions.\n",
        "\n"
      ],
      "metadata": {
        "id": "DXIBao7yyM4Q"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. What are the advantages and disadvantages of Decision Trees?"
      ],
      "metadata": {
        "id": "UvG_81gsyft-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Advantages of Decision Trees**\n",
        "\n",
        "1. **Easy to Understand and Interpret**:\n",
        "   - Decision trees are easy to visualize and interpret. They break down decisions into a series of simple rules (if-then statements), making them highly transparent. You can trace how the model arrived at a decision by following the tree structure.\n",
        "\n",
        "2. **Non-linear Relationships**:\n",
        "   - Decision trees can capture non-linear relationships between features and the target variable. Unlike linear models, they do not assume a linear relationship between inputs and outputs, making them more flexible in many scenarios.\n",
        "\n",
        "3. **Handles Both Categorical and Numerical Data**:\n",
        "   - Decision trees can handle both **categorical** and **numerical** data without requiring any transformation. They naturally work well with features of mixed data types.\n",
        "\n",
        "4. **No Need for Feature Scaling**:\n",
        "   - Decision trees do not require normalization or standardization of features, unlike models like logistic regression or support vector machines, where feature scaling is often necessary.\n",
        "\n",
        "5. **Automatic Feature Selection**:\n",
        "   - During the process of splitting the data at each node, decision trees automatically identify the most important features for making the decision, which helps with feature selection.\n",
        "\n",
        "6. **Robust to Outliers**:\n",
        "   - Decision trees are generally **robust to outliers** in the data. Since the decision tree splits the data based on specific criteria, outliers usually do not significantly affect the tree unless they dominate a large portion of the dataset.\n",
        "\n",
        "7. **Can Handle Missing Data**:\n",
        "   - Some implementations of decision trees (e.g., in Scikit-learn) can handle missing values by either substituting them with the most common values or by making decisions based on available data.\n",
        "\n",
        "8. **No Assumptions About Data Distribution**:\n",
        "   - Unlike many statistical models that assume a specific data distribution (e.g., normal distribution for linear regression), decision trees make no such assumptions, which makes them more versatile in various types of data.\n",
        "\n",
        "---\n",
        "\n",
        "### **Disadvantages of Decision Trees**\n",
        "\n",
        "1. **Overfitting**:\n",
        "   - One of the biggest drawbacks of decision trees is their tendency to **overfit**. If the tree is allowed to grow without constraints, it will fit the training data perfectly, but it may fail to generalize well to unseen data. This is especially true when the tree becomes too deep.\n",
        "   \n",
        "2. **Instability**:\n",
        "   - Decision trees can be **unstable**, meaning small changes in the data can lead to a completely different tree. This makes them sensitive to noise in the data, especially with small datasets.\n",
        "\n",
        "3. **Bias Toward Features with More Levels**:\n",
        "   - Decision trees tend to be **biased toward features with many distinct values**. Features with more levels or categories might dominate the decision-making process, potentially leading to less optimal splits.\n",
        "\n",
        "4. **Greedy Nature**:\n",
        "   - Decision trees use a **greedy algorithm** to split the data at each node based on the best immediate split (such as reducing impurity), but this does not necessarily lead to the globally optimal tree. It can get stuck in suboptimal solutions without considering future splits.\n",
        "\n",
        "5. **Poor Performance on Unstructured Data**:\n",
        "   - Decision trees do not perform well on data with high dimensionality (such as images or text data) without significant preprocessing or the use of ensemble methods like Random Forests or Gradient Boosting.\n",
        "\n",
        "6. **Difficulty in Modeling Complex Relationships**:\n",
        "   - Although decision trees can capture non-linear relationships, they may struggle to model **complex interactions** between features, especially when relationships involve more intricate dependencies across multiple features.\n",
        "\n",
        "7. **Large Trees Can Be Computationally Expensive**:\n",
        "   - For large datasets, decision trees can become computationally expensive, especially if they grow too deep or are not properly pruned. Storing and traversing large trees can lead to higher memory and computational costs.\n",
        "\n",
        "8. **Tendency to Create Unreadable Trees**:\n",
        "   - When decision trees are very deep (i.e., too many splits), they can become difficult to interpret or understand, which defeats the purpose of using a simple, interpretable model.\n",
        "\n",
        "9. **Need for Pruning**:\n",
        "   - To avoid overfitting, decision trees often need to be **pruned** (cut back), which involves deciding on the right depth and stopping criteria. Improper pruning can lead to either underfitting or overfitting.\n",
        "\n",
        "---\n",
        "\n",
        "### **Summary: Trade-offs Between Advantages and Disadvantages**\n",
        "\n",
        "| **Advantages**                              | **Disadvantages**                                 |\n",
        "|---------------------------------------------|--------------------------------------------------|\n",
        "| Easy to interpret and visualize            | Tendency to overfit, especially with deep trees  |\n",
        "| Can model non-linear relationships          | Instability (small changes in data can change the tree) |\n",
        "| Handles both categorical and numerical data | Biased toward features with more levels          |\n",
        "| No need for feature scaling                | Greedy approach may not lead to the optimal solution |\n",
        "| Automatically selects important features   | Poor performance on high-dimensional or unstructured data |\n",
        "| Robust to outliers                         | Difficulty modeling complex feature interactions |\n",
        "| Can handle missing values (with some methods) | Computationally expensive for large, deep trees  |\n",
        "| No assumptions about data distribution     | Large trees can be hard to interpret            |\n"
      ],
      "metadata": {
        "id": "UzYZerpnymTw"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "13. How does a Decision Tree handle missing values?"
      ],
      "metadata": {
        "id": "cjl3AnE3zbA7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **How Decision Trees Handle Missing Values**\n",
        "\n",
        "In decision tree algorithms, handling missing values is important to ensure that the model can still function effectively without losing valuable information. There are several strategies that decision tree algorithms can use to deal with missing values during the training and prediction stages.\n",
        "\n",
        "Here’s how **decision trees** generally handle missing values:\n",
        "\n",
        "---\n",
        "\n",
        "### 1. **Handling Missing Values in the Training Phase**\n",
        "\n",
        "During training, when a decision tree encounters missing values in the input data (features), the handling can vary based on the specific implementation (e.g., **Scikit-learn**, **CART**, **XGBoost**, etc.). Below are common approaches:\n",
        "\n",
        "#### **a. Ignoring the Missing Value**\n",
        "- **Dropping the Instance**:\n",
        "  - In some implementations, if an instance has missing values, the entire instance (row) is **dropped** from the dataset during training. This may not be ideal if there are many missing values, as it could lead to **information loss** and bias.\n",
        "  \n",
        "- **Splitting Based on Available Features**:\n",
        "  - When encountering a missing value at a node, the decision tree can **split the data based on available features** without considering the missing feature. This means that the missing values do not influence the decision to split, but only those samples with known values for the feature are used to determine the split.\n",
        "\n",
        "#### **b. Surrogate Splits**\n",
        "- **Surrogate Splitting**:\n",
        "  - Some decision tree implementations, like the **CART** algorithm, use **surrogate splits**. A surrogate split is a backup decision rule used when a key feature is missing for an observation.\n",
        "  - If a feature used for the primary split is missing, the tree uses an alternative feature (a **surrogate** feature) that **best mimics** the primary split. This surrogate split decision is based on the next best feature that would have been used if the primary feature wasn't missing.\n",
        "\n",
        "#### **c. Assigning Missing Values to a Branch (or Subset)**\n",
        "- **Default Branch Assignment**:\n",
        "  - Some decision tree algorithms assign missing values to the majority branch or subset. This means that if a missing value is encountered, the decision tree assigns it to the child node that corresponds to the majority class or average value, or a pre-determined default.\n",
        "\n",
        "#### **d. Imputation**\n",
        "- **Imputation Before Training**:\n",
        "  - Before building the decision tree, missing values can be imputed (filled in) using some strategy, such as the mean, median, or mode of the feature, or even using more advanced imputation methods (like regression imputation). This ensures that the model is built without any missing data. However, imputation may introduce some bias if the method doesn't capture the true distribution of the data.\n",
        "\n",
        "---\n",
        "\n",
        "### 2. **Handling Missing Values During Prediction**\n",
        "\n",
        "When making predictions with a trained decision tree, the tree may encounter missing values in the input features for new data points. In such cases, decision trees can handle missing values in the following ways:\n",
        "\n",
        "#### **a. Assign to the Most Likely Path**\n",
        "- If a feature is missing for a test sample, the decision tree will **follow the most likely path** based on the available features. This may involve using the decision rule that applies to the other features in the tree.\n",
        "  \n",
        "- **Most common strategy**: The missing values are assigned to the **branch that has the highest probability or majority class** based on the feature values that are available in the test sample. This can help make a prediction even when some features are missing.\n",
        "\n",
        "#### **b. Use Surrogate Splits**\n",
        "- Similar to the training phase, during prediction, decision trees can use **surrogate splits** if the feature being used in the primary decision is missing. Surrogate splits allow the tree to still make a decision based on the next best feature.\n",
        "\n",
        "#### **c. Propagate Missing Values**\n",
        "- Some decision tree models can propagate missing values down the tree, allowing them to reach a leaf node and get a predicted value or class. The method for determining which leaf to reach will depend on how the tree was trained (e.g., majority class for classification or mean value for regression).\n",
        "\n",
        "---\n",
        "\n",
        "### 3. **Example: Handling Missing Values in Scikit-learn**\n",
        "\n",
        "In **Scikit-learn**, decision trees (like **DecisionTreeClassifier** and **DecisionTreeRegressor**) do not natively handle missing values. If missing values exist in the dataset, you would typically need to handle them using one of the following techniques before fitting the model:\n",
        "\n",
        "- **Imputation**: Use the **SimpleImputer** class from **Scikit-learn** to fill in missing values with the mean, median, or mode.\n",
        "  \n",
        "- **Surrogate Splits**: Although Scikit-learn's decision tree models do not use surrogate splits by default, surrogate splits are implemented in other tree-based algorithms like **XGBoost**.\n",
        "\n",
        "#### Example of Imputation with Scikit-learn:\n",
        "\n",
        "```python\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Example dataset with missing values (NaN)\n",
        "X = [[1], [2], [3], [None], [5]]\n",
        "y = [1, 4, 9, 16, 25]\n",
        "\n",
        "# Impute missing values with the mean\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_imputed = imputer.fit_transform(X)\n",
        "\n",
        "# Split data into training and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_imputed, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train a Decision Tree Regressor\n",
        "model = DecisionTreeRegressor(random_state=42)\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(f\"Mean Squared Error: {mse}\")\n",
        "```\n",
        "\n",
        "In this example:\n",
        "- Missing values in the feature `X` are imputed using the mean.\n",
        "- The decision tree regressor is trained with the imputed dataset.\n",
        "\n",
        "---\n",
        "\n",
        "### 4. **Advanced Techniques for Handling Missing Values**\n",
        "\n",
        "- **Random Forests**: Ensemble methods like **Random Forests** tend to be more robust to missing values. Some implementations (like in **Scikit-learn**) allow for handling missing data by randomly splitting the data based on available features or by imputing missing values during the bootstrapping phase.\n",
        "  \n",
        "- **XGBoost**: XGBoost is another decision tree-based algorithm that offers built-in support for missing values. It automatically learns how to handle missing data by treating them as a separate \"missing value\" category when making splits.\n",
        "\n",
        "---\n",
        "\n",
        "### **Summary of Key Approaches to Handle Missing Values in Decision Trees**\n",
        "\n",
        "| **Approach**                    | **Description**                                                                 |\n",
        "|----------------------------------|---------------------------------------------------------------------------------|\n",
        "| **Dropping Instances**           | Rows with missing values are removed from the dataset.                          |\n",
        "| **Surrogate Splits**             | Use a secondary feature to make splits when the primary feature is missing.     |\n",
        "| **Assign to Default Branch**     | Assign missing values to the majority branch or most frequent category.         |\n",
        "| **Imputation**                   | Fill missing values before training with techniques like mean, median, or mode.|\n",
        "| **Path Assignment (Prediction)** | Use the most likely path for missing values during prediction.                 |\n",
        "| **Propagate Missing Values**     | Allow missing values to propagate down the tree, using available features to predict. |\n",
        "\n",
        "---\n",
        "\n",
        "### **Conclusion**\n",
        "\n",
        "Decision trees can handle missing values in several ways, but most commonly, missing data is handled by imputation before training or by using surrogate splits during training and prediction. The specific approach depends on the tree implementation. Handling missing values effectively is essential to building robust decision tree models that can perform well on real-world data with incomplete information."
      ],
      "metadata": {
        "id": "k1IW8_2Tzofv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "14. How does a Decision Tree handle categorical features?"
      ],
      "metadata": {
        "id": "h2nIB7pGz7fg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **How a Decision Tree Handles Categorical Features**\n",
        "\n",
        "A **Decision Tree** can naturally handle **categorical features** by making splits based on different categories or distinct values in a feature. This ability is key in distinguishing decision trees from other machine learning algorithms like linear regression, which require numerical input. Here's how a decision tree algorithm handles categorical features during the training and prediction phases:\n",
        "\n",
        "---\n",
        "\n",
        "### **1. Decision Tree Handling Categorical Features During Training**\n",
        "\n",
        "In the **training phase**, the goal of the decision tree is to make splits based on the features that best **partition** the data into homogeneous subsets (e.g., using **impurity measures** like Gini Impurity or Entropy).\n",
        "\n",
        "#### **a. Categorical Features with Two or More Categories**\n",
        "For categorical features, the decision tree will attempt to split the data into subsets based on the possible values of the categorical feature. Here's how it works for different types of categorical features:\n",
        "\n",
        "- **Binary Categorical Features (2 levels)**:\n",
        "  - If a feature has two categories (e.g., \"Yes\" and \"No\" or \"Male\" and \"Female\"), the decision tree will split the data based on whether the feature takes the value \"Yes\" or \"No\" (or \"Male\" or \"Female\"). This is similar to how decision trees split continuous numerical data at a threshold.\n",
        "  \n",
        "  Example: If a categorical feature is \"Gender\" with values \"Male\" and \"Female\", the tree might split based on whether the data point is \"Male\" or \"Female\".\n",
        "\n",
        "- **Multiclass Categorical Features (More than 2 levels)**:\n",
        "  - For features with multiple categories (e.g., \"Red\", \"Green\", \"Blue\"), the decision tree will evaluate different possible splits based on those categories. For example, it might split the data by \"Red\" vs. \"Green/Blue\", or it could choose another combination depending on the best criteria for minimizing the impurity.\n",
        "\n",
        "#### **b. Choosing the Best Split**\n",
        "The decision tree uses an **impurity measure** (like **Gini Impurity** or **Entropy** for classification) to decide which feature and value to split on. For categorical features, the algorithm will look at all possible ways to split the categories of the feature. For example:\n",
        "\n",
        "- **Gini Impurity**: For a categorical feature with three classes (A, B, and C), the algorithm will evaluate all possible ways to split the data into two groups (e.g., {A} vs {B, C}, or {A, B} vs {C}, etc.) and select the split that minimizes the Gini impurity.\n",
        "  \n",
        "- **Entropy and Information Gain**: The tree evaluates how much **information gain** is achieved by each possible split of the categorical feature, aiming to maximize the reduction in entropy (or uncertainty).\n",
        "\n",
        "#### **Example**: Consider a categorical feature called **\"Color\"** with three possible values: \"Red\", \"Green\", and \"Blue\". A decision tree might split the data as follows:\n",
        "\n",
        "- **Split 1**: \"Red\" vs. \"Green\" or \"Blue\".\n",
        "- **Split 2**: \"Green\" vs. \"Blue\".\n",
        "\n",
        "The tree chooses the split that minimizes impurity based on how well the categories divide the data into distinct groups with respect to the target variable (e.g., class labels).\n",
        "\n",
        "---\n",
        "\n",
        "### **2. Decision Tree Handling Categorical Features During Prediction**\n",
        "\n",
        "When making predictions for a new data point, the decision tree follows the same logic as it did during training:\n",
        "\n",
        "- **Binary Categorical Features**: If the feature is categorical with two values, the tree will check which category the feature value belongs to (e.g., \"Male\" or \"Female\") and navigate down the corresponding branch.\n",
        "  \n",
        "- **Multiclass Categorical Features**: For features with more than two categories, the tree will check the value of the categorical feature and follow the branch corresponding to that value.\n",
        "\n",
        "### **3. Encoding Categorical Data (When Required)**\n",
        "\n",
        "In some machine learning frameworks, such as **Scikit-learn**, categorical features may need to be **encoded** before being passed into the decision tree. This is because the algorithm often works more efficiently when the data is in numerical form.\n",
        "\n",
        "#### **Common Methods for Encoding Categorical Features**:\n",
        "\n",
        "- **Label Encoding**:\n",
        "  - This method involves converting each category into a unique integer label. For example, \"Red\" -> 0, \"Green\" -> 1, \"Blue\" -> 2. Label encoding is useful for **ordinal** categorical features (where the categories have a meaningful order, like \"Low\", \"Medium\", \"High\").\n",
        "\n",
        "- **One-Hot Encoding**:\n",
        "  - One-hot encoding creates a binary vector for each category. For example, a feature \"Color\" with three categories (Red, Green, Blue) would be converted into three binary columns: [1, 0, 0], [0, 1, 0], and [0, 0, 1]. One-hot encoding is often used for **nominal** categorical features (where there is no meaningful order between categories, like \"Red\", \"Green\", and \"Blue\").\n",
        "\n",
        "#### **In Scikit-learn**:\n",
        "- The **DecisionTreeClassifier** and **DecisionTreeRegressor** in Scikit-learn can handle **integer-encoded categorical data** directly, but if you use **one-hot encoding**, you may need to be cautious of how it impacts the split decisions, as the tree may treat the one-hot encoded variables as binary features.\n",
        "\n",
        "---\n",
        "\n",
        "### **4. Special Considerations**\n",
        "\n",
        "While decision trees handle categorical features well, there are some points to keep in mind:\n",
        "\n",
        "- **Handling High Cardinality**: If a categorical feature has too many levels (e.g., hundreds or thousands of categories), it might lead to overfitting or inefficient splits. In such cases, **feature engineering** or grouping categories can help to improve the model's performance.\n",
        "\n",
        "- **Categorical vs. Numerical Features**: Decision trees handle both numerical and categorical features by treating each type appropriately. However, care must be taken during preprocessing and encoding to ensure that the model receives the data in the right format.\n",
        "\n",
        "- **Overfitting**: Decision trees can overfit to categorical features if the tree grows too deep, especially when the categorical feature has many unique values or levels. This is why **pruning** or using ensemble methods like **Random Forests** or **Gradient Boosting** is often preferred in practice to reduce overfitting.\n",
        "\n",
        "---\n",
        "\n",
        "### **Example: Handling Categorical Data in Scikit-learn**\n",
        "\n",
        "Here’s a simple example of how a decision tree handles categorical features using **Label Encoding** in **Scikit-learn**:\n",
        "\n",
        "```python\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Example data with a categorical feature\n",
        "data = {\n",
        "    'Color': ['Red', 'Green', 'Blue', 'Red', 'Blue'],\n",
        "    'Size': ['Small', 'Medium', 'Large', 'Large', 'Small'],\n",
        "    'Target': ['Yes', 'No', 'Yes', 'No', 'Yes']\n",
        "}\n",
        "\n",
        "# Encoding categorical features\n",
        "encoder = LabelEncoder()\n",
        "data['Color'] = encoder.fit_transform(data['Color'])  # Red -> 0, Green -> 1, Blue -> 2\n",
        "data['Size'] = encoder.fit_transform(data['Size'])    # Small -> 0, Medium -> 1, Large -> 2\n",
        "\n",
        "# Prepare feature matrix X and target vector y\n",
        "X = data[['Color', 'Size']]\n",
        "y = data['Target']\n",
        "\n",
        "# Split data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Initialize the DecisionTreeClassifier\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Train the model\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Predict on test set\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Evaluate accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy: {accuracy}\")\n",
        "```\n",
        "\n",
        "In this example:\n",
        "- The categorical features **\"Color\"** and **\"Size\"** are encoded using **LabelEncoder**.\n",
        "- A **DecisionTreeClassifier** is trained on this encoded data, and predictions are made on the test set.\n",
        "\n",
        "---\n",
        "\n",
        "### **Summary**\n",
        "\n",
        "- **Decision trees** handle categorical features by directly splitting data based on the values of the categories.\n",
        "- **Binary categorical features** are treated like numerical thresholds, while **multiclass categorical features** involve evaluating different possible splits based on the feature's distinct categories.\n",
        "- **Label encoding** and **one-hot encoding** are commonly used to prepare categorical data for decision trees, though some tree implementations can handle categorical features natively.\n",
        "- When handling categorical data, be mindful of **high cardinality** (many unique values) and potential **overfitting** risks."
      ],
      "metadata": {
        "id": "GfFwnidZ0BEO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "15. What are some real-world applications of Decision Trees?"
      ],
      "metadata": {
        "id": "ZPtPjyWP4rNm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decision trees are versatile models used across a variety of fields due to their simplicity, interpretability, and ability to handle both numerical and categorical data. Here are some real-world applications of decision trees in different domains:\n",
        "\n",
        "### **1. Healthcare and Medical Diagnostics**\n",
        "- **Disease Diagnosis**: Decision trees are commonly used to diagnose diseases based on symptoms and patient data. For instance, in **predicting the presence of diabetes**, decision trees can analyze factors such as age, BMI, family history, and lifestyle habits to predict the likelihood of the disease.\n",
        "- **Medical Imaging**: Decision trees can be applied to classify medical images, such as X-rays, MRIs, or CT scans, for conditions like tumors or fractures by extracting features from the image and making decisions about the presence of specific conditions.\n",
        "\n",
        "### **2. Finance and Banking**\n",
        "- **Credit Scoring**: Decision trees are widely used in **credit risk assessment** to determine whether an applicant is eligible for a loan or credit card. The decision tree considers features like income, employment history, credit score, and past financial behavior to predict whether a person is a good or bad credit risk.\n",
        "- **Fraud Detection**: Decision trees help identify fraudulent activities by analyzing transaction patterns. They can assess factors such as transaction amount, location, frequency, and history to determine the likelihood of fraud.\n",
        "- **Customer Segmentation**: Banks and financial institutions use decision trees to segment customers based on behavior, risk, and spending patterns. This segmentation helps in offering personalized products and services.\n",
        "\n",
        "### **3. Marketing and Customer Relationship Management (CRM)**\n",
        "- **Customer Churn Prediction**: In the telecom or subscription-based business, decision trees are used to predict customer churn. They analyze customer demographics, usage patterns, service history, and other features to classify customers who are likely to leave and those who are likely to stay.\n",
        "- **Targeted Marketing Campaigns**: Decision trees help marketers segment customers into groups based on their buying behavior, demographics, and preferences. This segmentation allows businesses to send personalized marketing messages to the most promising customers.\n",
        "- **Product Recommendations**: Decision trees can be used for recommending products based on a customer’s past purchases or browsing history, allowing for better targeting and increasing sales.\n",
        "\n",
        "### **4. Retail and E-commerce**\n",
        "- **Inventory Management**: Retailers use decision trees for demand forecasting and optimizing inventory management. They help predict the demand for products based on seasonality, sales history, and other variables, ensuring that the right amount of stock is maintained.\n",
        "- **Price Optimization**: Decision trees are used to determine the best pricing strategy for products by analyzing factors like competitor pricing, demand elasticity, customer preferences, and seasonal trends.\n",
        "- **Sales Conversion Prediction**: By analyzing past customer interactions, decision trees can help predict the likelihood of a sale being made based on customer behavior (e.g., clickstream data, time spent on the site, or past purchase history).\n",
        "\n",
        "### **5. Manufacturing and Supply Chain**\n",
        "- **Predictive Maintenance**: Decision trees are applied in industrial settings to predict when a machine or equipment will fail. By analyzing factors such as age, usage patterns, maintenance history, and sensor data, decision trees help in scheduling maintenance to avoid costly downtime.\n",
        "- **Supply Chain Optimization**: Decision trees are used to optimize supply chain processes, such as demand forecasting, inventory management, and production planning. They can also help in evaluating different logistical routes and determining the most cost-effective one.\n",
        "\n",
        "### **6. Environmental Science and Agriculture**\n",
        "- **Environmental Monitoring**: Decision trees are used to analyze environmental data (such as air quality, water quality, and weather conditions) and classify regions that may be at risk for pollution or other environmental hazards.\n",
        "- **Precision Agriculture**: In agriculture, decision trees can be used to predict crop yield, recommend irrigation levels, or assess the need for fertilizer, based on variables like soil quality, climate conditions, and crop type. They help farmers make informed decisions about resource usage, leading to higher yields and lower costs.\n",
        "\n",
        "### **7. Sports Analytics**\n",
        "- **Player Performance Prediction**: Decision trees can be used to predict the performance of athletes based on past statistics, health status, training intensity, and other factors. For example, in **football (soccer)**, decision trees can be used to predict the likelihood of a player scoring based on factors like the type of game, opponent's defense, and player condition.\n",
        "- **Game Strategy Optimization**: Teams can use decision trees to optimize strategies during a match by analyzing the behavior of the opposing team and making real-time decisions based on various game factors (e.g., player positions, time remaining, and score difference).\n",
        "\n",
        "### **8. Insurance**\n",
        "- **Claim Prediction**: Insurance companies use decision trees to predict the likelihood of an insurance claim being made based on the policyholder's history, age, gender, occupation, and other risk factors. This allows companies to adjust premiums and identify high-risk customers.\n",
        "- **Fraud Detection**: Decision trees are widely used in identifying fraudulent insurance claims by evaluating various features, such as claim history, type of claim, and any inconsistencies in the data provided.\n",
        "\n",
        "### **9. Politics and Public Policy**\n",
        "- **Voter Behavior Analysis**: Political campaigns use decision trees to analyze voter data and predict voting behavior. They consider demographic features like age, gender, location, and past voting history to segment voters and design targeted campaign strategies.\n",
        "- **Policy Decision Making**: Decision trees are used by policymakers to evaluate the impact of various policy options. They help model the potential outcomes of different decisions based on historical data and projected trends.\n",
        "\n",
        "### **10. Education and Admissions**\n",
        "- **Student Performance Prediction**: Educational institutions use decision trees to predict student performance based on historical grades, socioeconomic factors, and engagement levels. These predictions help to identify students who may need additional support or intervention.\n",
        "- **College Admissions**: Decision trees are used in **college admissions** to predict the likelihood of a student’s success in a particular program based on high school GPA, standardized test scores, extracurricular activities, and application essays.\n",
        "\n",
        "---\n",
        "\n",
        "### **Advantages of Using Decision Trees in Real-World Applications**\n",
        "\n",
        "1. **Interpretability**: Decision trees are easy to understand, making them ideal for industries where decision-making transparency is important (e.g., finance, healthcare, law).\n",
        "   \n",
        "2. **Handling Mixed Data Types**: Decision trees can naturally handle both categorical and numerical data without needing transformations (unlike many other algorithms).\n",
        "\n",
        "3. **Flexibility**: Decision trees can be used for both **classification** (e.g., predicting customer churn or disease diagnosis) and **regression** (e.g., predicting sales revenue or crop yield).\n",
        "\n",
        "4. **Non-linear Relationships**: They do not assume linear relationships between the input features and the target variable, allowing them to capture complex patterns.\n",
        "\n",
        "5. **Automatic Feature Selection**: Decision trees automatically select the most important features to split on, reducing the need for manual feature engineering.\n",
        "\n"
      ],
      "metadata": {
        "id": "xpQ-YU1m46Va"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Practical"
      ],
      "metadata": {
        "id": "Z2i3sAUX5JBZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "16. Write a Python program to train a Decision Tree Classifier on the Iris dataset and print the model accuracy."
      ],
      "metadata": {
        "id": "eUf-ncmm5M8M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Initialize the Decision Tree Classifier\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Train the classifier on the training data\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy of the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Model Accuracy: {accuracy:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h8O3DHck5W0b",
        "outputId": "7acf45d7-fed9-4096-eb2a-d4594a01ddf8"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Accuracy: 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "17. Write a Python program to train a Decision Tree Classifier using Gini Impurity as the criterion and print the\n",
        "feature importances."
      ],
      "metadata": {
        "id": "0hEVcMUh8AKd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Initialize the Decision Tree Classifier with Gini Impurity as the criterion\n",
        "clf = DecisionTreeClassifier(criterion='gini', random_state=42)\n",
        "\n",
        "# Train the classifier on the training data\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Print feature importances\n",
        "print(\"Feature Importances:\")\n",
        "for feature, importance in zip(iris.feature_names, clf.feature_importances_):\n",
        "    print(f\"{feature}: {importance:.4f}\")\n",
        "\n",
        "# Optionally, print the accuracy of the model on the test set\n",
        "accuracy = clf.score(X_test, y_test)\n",
        "print(f\"\\nModel Accuracy on Test Data: {accuracy:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uBLN21388GZx",
        "outputId": "848acc40-1832-4c5c-f218-9e9a8b853864"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature Importances:\n",
            "sepal length (cm): 0.0000\n",
            "sepal width (cm): 0.0191\n",
            "petal length (cm): 0.8933\n",
            "petal width (cm): 0.0876\n",
            "\n",
            "Model Accuracy on Test Data: 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "18. Write a Python program to train a Decision Tree Classifier using Entropy as the splitting criterion and print the\n",
        "model accuracy."
      ],
      "metadata": {
        "id": "hclpzJUG8Nul"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Initialize the Decision Tree Classifier with Entropy as the criterion\n",
        "clf = DecisionTreeClassifier(criterion='entropy', random_state=42)\n",
        "\n",
        "# Train the classifier on the training data\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy of the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Model Accuracy: {accuracy:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V81teYti8VKP",
        "outputId": "caf42b36-38ad-4062-d338-fc00bea6d728"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Accuracy: 0.9778\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "19. Write a Python program to train a Decision Tree Regressor on a housing dataset and evaluate using Mean\n",
        "Squared Error (MSE)."
      ],
      "metadata": {
        "id": "C4lCA5fm8h7W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import fetch_california_housing\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Load the California housing dataset\n",
        "housing = fetch_california_housing()\n",
        "X = housing.data  # Features (e.g., longitude, latitude, population, etc.)\n",
        "y = housing.target  # Target (median house value for California districts)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Initialize the Decision Tree Regressor\n",
        "regressor = DecisionTreeRegressor(random_state=42)\n",
        "\n",
        "# Train the regressor on the training data\n",
        "regressor.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred = regressor.predict(X_test)\n",
        "\n",
        "# Calculate and print the Mean Squared Error (MSE)\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Neo3CHSI8rZs",
        "outputId": "9b9a6e59-717c-49b0-f31e-cd74e7811f43"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error (MSE): 0.5280\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "20. Write a Python program to train a Decision Tree Classifier and visualize the tree using graphviz."
      ],
      "metadata": {
        "id": "jfgWVqJX80mZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier, export_graphviz\n",
        "import graphviz\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Initialize the Decision Tree Classifier\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Train the classifier on the training data\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Visualize the Decision Tree using graphviz\n",
        "dot_data = export_graphviz(clf, out_file=None,\n",
        "                           feature_names=iris.feature_names,\n",
        "                           class_names=iris.target_names,\n",
        "                           filled=True, rounded=True,\n",
        "                           special_characters=True)\n",
        "graph = graphviz.Source(dot_data)\n",
        "graph.render(\"iris_decision_tree\", view=True)  # This will save the tree and open it in a viewer\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "tRk8WOqL88mO",
        "outputId": "22f54ace-c70d-44bb-ebf8-c81fe01b9054"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'iris_decision_tree.pdf'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "21. Write a Python program to train a Decision Tree Classifier with a maximum depth of 3 and compare its\n",
        "accuracy with a fully grown tree."
      ],
      "metadata": {
        "id": "ksNTz2SV9M6T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Initialize the Decision Tree Classifier with max_depth=3 (pruned tree)\n",
        "clf_pruned = DecisionTreeClassifier(max_depth=3, random_state=42)\n",
        "\n",
        "# Train the pruned classifier on the training data\n",
        "clf_pruned.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred_pruned = clf_pruned.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy of the pruned model\n",
        "accuracy_pruned = accuracy_score(y_test, y_pred_pruned)\n",
        "print(f\"Accuracy of Pruned Decision Tree (max_depth=3): {accuracy_pruned:.4f}\")\n",
        "\n",
        "# Initialize the Decision Tree Classifier with no depth restriction (fully grown tree)\n",
        "clf_full = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Train the fully grown classifier on the training data\n",
        "clf_full.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred_full = clf_full.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy of the fully grown model\n",
        "accuracy_full = accuracy_score(y_test, y_pred_full)\n",
        "print(f\"Accuracy of Fully Grown Decision Tree (no max_depth): {accuracy_full:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D0GSdB2h9S3O",
        "outputId": "3e8d57c1-6e62-496e-c03e-d8ab2757f166"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of Pruned Decision Tree (max_depth=3): 1.0000\n",
            "Accuracy of Fully Grown Decision Tree (no max_depth): 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "22. Write a Python program to train a Decision Tree Classifier using min_samples_split=5 and compare its\n",
        "accuracy with a default tree."
      ],
      "metadata": {
        "id": "o31AKRGR9bbC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Initialize the Decision Tree Classifier with min_samples_split=5\n",
        "clf_min_samples_split = DecisionTreeClassifier(min_samples_split=5, random_state=42)\n",
        "\n",
        "# Train the classifier on the training data\n",
        "clf_min_samples_split.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred_min_samples_split = clf_min_samples_split.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy of the model with min_samples_split=5\n",
        "accuracy_min_samples_split = accuracy_score(y_test, y_pred_min_samples_split)\n",
        "print(f\"Accuracy of Decision Tree with min_samples_split=5: {accuracy_min_samples_split:.4f}\")\n",
        "\n",
        "# Initialize the Decision Tree Classifier with default parameters (no min_samples_split)\n",
        "clf_default = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Train the default classifier on the training data\n",
        "clf_default.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred_default = clf_default.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy of the default model\n",
        "accuracy_default = accuracy_score(y_test, y_pred_default)\n",
        "print(f\"Accuracy of Default Decision Tree (no min_samples_split): {accuracy_default:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fBMfKfJl9ggD",
        "outputId": "97a2cfd5-a83f-4a52-b0ae-423595a66648"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of Decision Tree with min_samples_split=5: 1.0000\n",
            "Accuracy of Default Decision Tree (no min_samples_split): 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "23. Write a Python program to apply feature scaling before training a Decision Tree Classifier and compare its\n",
        "accuracy with unscaled data."
      ],
      "metadata": {
        "id": "BIZuBoJJ9oj7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# **Model with unscaled data**\n",
        "# Initialize the Decision Tree Classifier with default parameters\n",
        "clf_unscaled = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Train the model on the unscaled data\n",
        "clf_unscaled.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred_unscaled = clf_unscaled.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy of the model with unscaled data\n",
        "accuracy_unscaled = accuracy_score(y_test, y_pred_unscaled)\n",
        "print(f\"Accuracy of Decision Tree with unscaled data: {accuracy_unscaled:.4f}\")\n",
        "\n",
        "# **Model with scaled data**\n",
        "# Initialize the StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# Fit and transform the training data and transform the test data\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)\n",
        "\n",
        "# Initialize the Decision Tree Classifier again for the scaled data\n",
        "clf_scaled = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Train the model on the scaled data\n",
        "clf_scaled.fit(X_train_scaled, y_train)\n",
        "\n",
        "# Make predictions on the scaled test data\n",
        "y_pred_scaled = clf_scaled.predict(X_test_scaled)\n",
        "\n",
        "# Calculate and print the accuracy of the model with scaled data\n",
        "accuracy_scaled = accuracy_score(y_test, y_pred_scaled)\n",
        "print(f\"Accuracy of Decision Tree with scaled data: {accuracy_scaled:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c-tEOwng9tfE",
        "outputId": "2768b16c-2a31-447f-d254-50d03bd83835"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of Decision Tree with unscaled data: 1.0000\n",
            "Accuracy of Decision Tree with scaled data: 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "24. Write a Python program to train a Decision Tree Classifier using One-vs-Rest (OvR) strategy for multiclass\n",
        "classification."
      ],
      "metadata": {
        "id": "Q8RDU1AP9zpO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.multiclass import OneVsRestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Initialize the Decision Tree Classifier\n",
        "dt_classifier = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Use the One-vs-Rest (OvR) strategy with the Decision Tree Classifier\n",
        "ovr_classifier = OneVsRestClassifier(dt_classifier)\n",
        "\n",
        "# Train the classifier on the training data\n",
        "ovr_classifier.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred = ovr_classifier.predict(X_test)\n",
        "\n",
        "# Calculate and print the accuracy of the model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy of Decision Tree with One-vs-Rest strategy: {accuracy:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D4wci48S958e",
        "outputId": "18002e5e-9244-4404-98e1-dc0e15be2127"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy of Decision Tree with One-vs-Rest strategy: 1.0000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "25. Write a Python program to train a Decision Tree Classifier and display the feature importance scores."
      ],
      "metadata": {
        "id": "8BlRLaOO-A9l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features (sepal length, sepal width, petal length, petal width)\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Initialize the Decision Tree Classifier\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Train the classifier on the training data\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Get the feature importance scores\n",
        "feature_importances = clf.feature_importances_\n",
        "\n",
        "# Print the feature importance scores\n",
        "print(\"Feature Importance Scores:\")\n",
        "for feature, importance in zip(iris.feature_names, feature_importances):\n",
        "    print(f\"{feature}: {importance:.4f}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2zB8rw9O-Lzt",
        "outputId": "0e65e2ba-c5c1-4547-f63b-240b65f5c527"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Feature Importance Scores:\n",
            "sepal length (cm): 0.0000\n",
            "sepal width (cm): 0.0191\n",
            "petal length (cm): 0.8933\n",
            "petal width (cm): 0.0876\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "26. Write a Python program to train a Decision Tree Regressor with max_depth=5 and compare its performance\n",
        "with an unrestricted tree."
      ],
      "metadata": {
        "id": "nC2QJ0Ja-mni"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "#from sklearn.datasets import load_boston  # This is deprecated\n",
        "from sklearn.datasets import fetch_california_housing # This imports the California housing dataset\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "# Load the California housing dataset instead of the Boston housing dataset\n",
        "#boston = load_boston()\n",
        "housing = fetch_california_housing() # This line loads the California housing dataset\n",
        "X = housing.data  # Features\n",
        "y = housing.target  # Target (house prices)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Train Decision Tree Regressor with max_depth=5\n",
        "regressor_depth_5 = DecisionTreeRegressor(max_depth=5, random_state=42)\n",
        "regressor_depth_5.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred_depth_5 = regressor_depth_5.predict(X_test)\n",
        "\n",
        "# Calculate Mean Squared Error (MSE) for the restricted tree\n",
        "mse_depth_5 = mean_squared_error(y_test, y_pred_depth_5)\n",
        "print(f\"Mean Squared Error (MSE) of Decision Tree Regressor with max_depth=5: {mse_depth_5:.4f}\")\n",
        "\n",
        "# Train Decision Tree Regressor without any depth restriction (unrestricted tree)\n",
        "regressor_unrestricted = DecisionTreeRegressor(random_state=42)\n",
        "regressor_unrestricted.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test data\n",
        "y_pred_unrestricted = regressor_unrestricted.predict(X_test)\n",
        "\n",
        "# Calculate Mean Squared Error (MSE) for the unrestricted tree\n",
        "mse_unrestricted = mean_squared_error(y_test, y_pred_unrestricted)\n",
        "print(f\"Mean Squared Error (MSE) of Decision Tree Regressor (unrestricted tree): {mse_unrestricted:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OcUr97_1-0ZB",
        "outputId": "5d5da154-086b-4bbc-c46f-a8e70e3bb4f3"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean Squared Error (MSE) of Decision Tree Regressor with max_depth=5: 0.5211\n",
            "Mean Squared Error (MSE) of Decision Tree Regressor (unrestricted tree): 0.5280\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "27. Write a Python program to train a Decision Tree Classifier, apply Cost Complexity Pruning (CCP), and\n",
        "visualize its effect on accuracy."
      ],
      "metadata": {
        "id": "2a7fAa1g-_yR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.tree import plot_tree\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Train a Decision Tree Classifier without pruning\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Calculate accuracy of the initial (unpruned) tree\n",
        "initial_accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Initial accuracy (without pruning): {initial_accuracy:.4f}\")\n",
        "\n",
        "# Get the effective alphas and corresponding total impurities from the model\n",
        "path = clf.cost_complexity_pruning_path(X_train, y_train)\n",
        "ccp_alphas = path.ccp_alphas\n",
        "# The 'impurities' attribute might not be available in older scikit-learn versions.\n",
        "# We will calculate it manually if necessary.\n",
        "try:\n",
        "    impurities = path.impurities\n",
        "except AttributeError:\n",
        "    # Manual calculation of impurities (total impurity of leaves) if 'impurities' is not available\n",
        "    impurities = []\n",
        "    for alpha in ccp_alphas:\n",
        "        clf_pruned = DecisionTreeClassifier(random_state=42, ccp_alpha=alpha)\n",
        "        clf_pruned.fit(X_train, y_train)\n",
        "        impurities.append(sum(clf_pruned.tree_.impurity * clf_pruned.tree_.n_node_samples))\n",
        "\n",
        "\n",
        "# Store the accuracy for each alpha value\n",
        "accuracies = []\n",
        "\n",
        "# Iterate over different values of ccp_alpha (from the path)\n",
        "for alpha in ccp_alphas:\n",
        "    # Create a new DecisionTreeClassifier with a specific ccp_alpha value\n",
        "    clf_pruned = DecisionTreeClassifier(random_state=42, ccp_alpha=alpha)\n",
        "    clf_pruned.fit(X_train, y_train)\n",
        "\n",
        "    # Make predictions on the test set\n",
        "    y_pred_pruned = clf_pruned.predict(X_test)\n",
        "\n",
        "    # Calculate accuracy for the pruned tree\n",
        "    accuracy_pruned = accuracy_score(y_test, y_pred_pruned)\n",
        "    accuracies.append(accuracy_pruned)\n",
        "\n",
        "# Plot accuracy vs ccp_alpha\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(ccp_alphas, accuracies, marker=\"o\", drawstyle=\"steps-post\")\n",
        "plt.xlabel(\"ccp_alpha\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.title(\"Effect of Cost Complexity Pruning on Accuracy\")\n",
        "plt.grid(True)\n",
        "plt.show()\n",
        "\n",
        "# Find the optimal ccp_alpha (the one with the highest accuracy)\n",
        "optimal_alpha = ccp_alphas[accuracies.index(max(accuracies))]\n",
        "print(f\"Optimal ccp_alpha: {optimal_alpha:.4f}\")\n",
        "\n",
        "# Train the pruned decision tree with the optimal ccp_alpha value\n",
        "clf_pruned_optimal = DecisionTreeClassifier(random_state=42, ccp_alpha=optimal_alpha)\n",
        "clf_pruned_optimal.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set with the pruned tree\n",
        "y_pred_optimal_pruned = clf_pruned_optimal.predict(X_test)\n",
        "\n",
        "# Calculate accuracy for the pruned tree with the optimal alpha\n",
        "optimal_pruned_accuracy = accuracy_score(y_test, y_pred_optimal_pruned)\n",
        "print(f\"Accuracy of the pruned tree with optimal ccp_alpha: {optimal_pruned_accuracy:.4f}\")\n",
        "\n",
        "# Plot the tree with optimal pruning\n",
        "plt.figure(figsize=(12, 8))\n",
        "plot_tree(clf_pruned_optimal, filled=True, feature_names=iris.feature_names, class_names=iris.target_names)\n",
        "plt.title(\"Decision Tree with Cost Complexity Pruning\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "n6XpCZFk_nX1",
        "outputId": "a8a1ad30-df89-4188-cc7f-07c33e987cdd"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial accuracy (without pruning): 1.0000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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Hx8zZcqUEr6SAIwxpnL/lyMAp+PHj+vw4cMuYzabTbVr11bLli21cOFCPfLII2rYsKEeffRRSVL79u2d9wVFR0dryJAhznVzcnJ0/fXX69dff9X999+vyy67TF988YUSEhKUkZHhMoHEPffco/nz56t379669957debMGX322Wf68ssv1alTJy1cuFD33nuvOnfurPvuu0+S1KxZs2KP5Y8//lCPHj20d+9ejRw5UhEREVq6dKmGDRumY8eOafTo0cUeU506dYrc5kcffaQzZ85Y3gNVYMeOHerWrZuCg4M1btw4+fv769VXX1WPHj306aefKjIyUpI0ceJEJSUlOY8vKytLX3/9tbZs2aLo6Gjdf//9+u2335ScnKyFCxda7nfjxo06evSoxowZI19fX8vlMzMz1aVLF+Xk5GjUqFGqXbu2FixYoFtuuUXLli3TgAEDXJZPSkpSlSpV9MQTT2jv3r16+eWX5e/vLx8fH/3++++aOHGivvzyS82fP18RERGaMGGCy/qffvqplixZolGjRslut+uVV15Rr169lJaWptatWxdb58KFCzV06FDFxsbq+eefV05OjubMmaOuXbtq69atatKkiW688UY9+OCDSkpKUv/+/dWhQwdlZGTo4YcfVs+ePfXAAw8Uue3u3btr1KhReumll/Tkk0+qZcuWkqSWLVtq8ODB+ve//601a9bo5ptvdq5z4MABrVu3rkSXeBblhx9+kCTVrl3bObZnzx4NGjRI999/v4YPH64rrrjiorZ9xx13KCIiQklJSdqyZYtef/111a1bV88//7zlug8//LBq1aqlxMRE7d+/X7NmzdLIkSO1ZMkS5zIJCQl64YUX1K9fP8XGxmr79u2KjY3VqVOnLLdvjNEtt9yiTz75RPfcc4/atWunNWvW6LHHHtOvv/5a6Kztxo0btXz5cj344IOqXr26XnrpJd12221KT093ee2K89Zbb6lZs2a65ppr1Lp1awUFBemdd97RY4895rKc1fcgSZo0aZImTpyoLl26aPLkyQoICNCmTZu0bt06xcTEWNZSlAcffFB16tTRhAkTdPLkSUnSV199pS+++EJ33nmnGjZsqP3792vOnDnq0aOHdu7cqaCgIElnJ7bp1q2bdu3apbvvvlsdOnTQ4cOH9f777+uXX35Ru3btNGDAAOeZzXO/H7zzzjsyxuhv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7TZt37690L1y59ckSYMHD9batWs1a9Ys1a5du9ReZ6Cy4YwTAElnb6Qu+F/fc3Xp0sVlgoOSeuyxx/T+++/r5ptv1rBhw9SxY0edPHlS3377rZYtW6b9+/crNDRUN9xwgwYPHqyXXnpJ33//vXr16qX8/Hx99tlnuuGGGzRy5EhJUseOHfXxxx87PzA0IiKiyHtzpLM3uL/66qsaNmyYNm/erCZNmmjZsmX6/PPPNWvWrBJPnHC+6dOn64cfftCoUaO0fPly3XzzzapVq5bS09O1dOlS7d69W3feeack6dlnn1VycrK6du2qBx98UH5+fnr11VeVm5urF154wbnNVq1aqUePHurYsaNCQkL09ddfa9myZc7jLjh2SRo1apRiY2Pl6+vr3E9xr/2OHTs0ffp0ffLJJ7r99tsVHh6uAwcOaOXKlUpLS9MXX3whSXriiSf0zjvvqHfv3ho1apRCQkK0YMEC7du3T//5z38K3Sd2qVq3bq3Y2FiX6cglFflLa4Hg4GDNmTNHgwcPVocOHXTnnXeqTp06Sk9P14cffqjrrrtO//znP3Xq1CkNHTpULVq00HPPPefc7gcffKC4uDh9++23xX7AaLt27eTr66vnn39ex48fl91u14033qi6detKOnsWsVevXlq6dKlq1qypvn37lurrciH33nuvpk6dqnvvvVedOnXShg0b9N///rfc9n+usLAwjR49WtOnT9ctt9yiXr16afv27froo48UGhpqeeauX79+uuGGG/TUU09p//79atu2rdauXav33ntPY8aMueDHDJTUb7/9pk8++aTQBBQF7Ha7YmNjtXTpUr300ksl+h7UvHlzPfXUU3rmmWfUrVs3/eUvf5HdbtdXX32l+vXrKykpSdLZXj3wwAO67bbbFB0dre3bt2vNmjWFznpdyM0336yFCxeqRo0aatWqlVJTU/Xxxx8Xmn79scce07Jly/TXv/5Vd999tzp27KijR4/q/fff19y5c9W2bVvnsnfddZfGjRunFStWaMSIES4TvABwgwdm8gNQgVxoOnKdNw2yO9ORG3N2GumEhATTvHlzExAQYEJDQ02XLl3MtGnTXKa0PnPmjHnxxRfNlVdeaQICAkydOnVM7969zebNm53L7N6923Tv3t1UqVKlxB+AGxcXZ0JDQ01AQIC5+uqri5zSuaTTkZ9b6+uvv266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0bi0dZKkG2+8UTWqBlqsgYqosr4PC65GKwmPBafQ0FD5+voqMzPTZTwzM1Ph4eFFrlOnTh2tXLlSp06d0pEjR1S/fn098cQTatq0abH7sdvtstvthcb9/f0r1BdFRasH7qF/3o8eej966P3ooXfyN7b//dvfjx56ucr2PnTnWD02OURAQIA6duyolJQU51h+fr5SUlIUFRV1wXUDAwPVoEEDnTlzRv/5z3906623lnW5AAAAACoxj16qFx8fr6FDh6pTp07q3LmzZs2apZMnTyouLk6SNGTIEDVo0EBJSUmSpE2bNunXX39Vu3bt9Ouvv2rixInKz8/XuHHjPHkYAAAAAP7kPBqcBg4cqEOHDmnChAk6cOCA2rVrp9WrVzsnjEhPT5ePz/9Oip06dUpPP/20fvzxR1WrVk19+vTRwoULVbNmTQ8dAQAAAIDKwOOTQ4wcOVIjR44s8rn169e7PL7++uu1c+fOcqgKAAAAAP7Hox+ACwAAAADegOAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABYITgAAAABggeAEAAAAABY8Hpxmz56tJk2aKDAwUJGRkUpLS7vg8rNmzdIVV1yhKlWqqFGjRnrkkUd06tSpcqoWAAAAQGXk0eC0ZMkSxcfHKzExUVu2bFHbtm0VGxurgwcPFrn822+/rSeeeEKJiYnatWuX3njjDS1ZskRPPvlkOVcOAAAAoDLxaHCaMWOGhg8frri4OLVq1Upz585VUFCQ5s2bV+TyX3zxha677jrdddddatKkiWJi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mYSEBMXHxzsfZ2VlqVGjRoqJiVFwcHB5lHlBDodDycnJio6OLtOpH1E26J/3o4fejx56P3ro/eih9yuvHuacPuP8kN3Y2BgFBXg2jhRcjVYSHq00NDRUvr6+yszMdBnPzMxUeHj4Bdc9efKkFi9erMmTJ19wObvdLrvdXmjc39+/Qr2xK1o9cA/983700PvRQ+9HD70fPfR+Zd1Df/O/+9/O7suzwcmdY/XorHoBAQHq2LGjUlJSnGP5+flKSUlRVFTUBdddunSpcnNz9fe//72sywQAAABQybkdnJo0aaLJkycrPT29VAqIj4/Xa6+9pgULFmjXrl0aMWKETp486Zxlb8iQIS6TRxR444031L9/f9WuXbtU6gAAAACA4rgdnMaMGaPly5eradOmio6O1uLFi11mrXPXwIEDNW3aNE2YMEHt2rXTtm3btHr1aueEEenp6crIyHBZZ8+ePdq4caPuueeei94vAAAAAJTURQWnbdu2KS0tTS1bttTDDz+sevXqaeTIkdqyZctFFTFy5Ej99NNPys3N1aZNmxQZGel8bv369Zo/f77L8ldccYWMMYqOjr6o/QEAAACAOy76HqcOHTropZde0m+//abExES9/vrruuaaa9SuXTvNmzdPxnh2TnYAAAAAKC0XPY2Fw+HQihUr9Oabbyo5OVnXXnut7rnnHv3yyy968skn9fHHH+vtt98uzVoBAAAAwCPcDk5btmzRm2++qXfeeUc+Pj4aMmSIZs6cqSuvvNK5zIABA3TNNdeUaqEAAAAA4CluB6drrrlG0dHRmjNnjvr371/k3OcRERG68847S6VAAAAAAPA0t4PTjz/+qMaNG19wmapVq+rNN9+86KIAAAAAoCJxe3KIgwcPatOmTYXGN23apK+//rpUigIAAACAisTt4PTQQw/p559/LjT+66+/6qGHHiqVogAAAACgInE7OO3cuVMdOnQoNN6+fXvt3LmzVIoCAAAAgIrE7eBkt9uVmZlZaDwjI0N+fhc9uzkAAAAAVFhuB6eYmBglJCTo+PHjzrFjx47pySefVHR0dKkWBwAAAAAVgduniKZNm6bu3burcePGat++vSRp27ZtCgsL08KFC0u9QAAAAADwNLeDU4MGDfTNN9/orbfe0vbt21WlShXFxcVp0KBBRX6mEwAAAAB4u4u6Kalq1aq67777SrsWAAAA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8lq2bKkDBw7o9OnTRX6+lN1ul91uLzTu7+9fod7YFa0euIf+eT966P3oofejh96PHnq/su6hv7Gdty/PBid3jrXE05Fv3LhR2dnZ6tixoyIjI/XPf/5Thw8fvqgCJSkgIEAdO3ZUSkqKcyw/P18pKSmKiooqcp3rrrtOe/fuVX5+vnPsv//9r+rVq1dkaAIAAACA0lDi4HTttdfqtddeU0ZGhu6//34tXrxY9evXV35+vpKTk5Wdne32zuPj4/Xaa69pwYIF2rVrl0aMGKGTJ086Z9kbMmSIy+QRI0aM0NGjRzV69Gj997//1YcffqgpU6booYcecnvfAAAAAFBSbn8AbtWqVXX33Xdr48aN+vbbb/Xoo49q6tSpqlu3rm655Ra3tjVw4EBNmzZNEyZMULt27bRt2zatXr3aOWFEenq6MjIynMs3atRIa9as0VdffaU2bdpo1KhRGj16dJFTlwMAAABAabmkiwqvuOIKvfDCC0pKStIHH3ygefPmub2NkSNHauTIkUU+t379+kJjUVFR+vLLL93eDwAAAABcLLfPOBXF19dX/fv31/vvv18amwMAAACACqVUghMAAAAA/JkRnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACwQnAAAAADAAsEJAAAAACxUiOA0e/ZsNWnSRIGBgYqMjFRaWlqxy86fP182m83lT2BgYDlWCwAAAKCy8XhwWrJkieLj45WYmKgtW7aobdu2io2N1cGDB4tdJzg4WBkZGc4/P/30UzlWDAAAAKCy8XhwmjFjhoYPH664uDi1atVKc+fOVVBQkObNm1fsOjabTeHh4c4/YWFh5VgxAAAAgMrGz5M7P336tDZv3qyEhATnmI+Pj3r27KnU1NRi1ztx4oQaN26s/Px8dejQQVOmTNFVV11V5LK5ubnKzc11Ps7KypIkORwOORyOUjqSi1dQQ0WoBe6jf96PHno/euj96KH3o4fer7x66HCccdmnw2bKdH9W3DlemzHGY9X+9ttvatCggb744gtFRUU5x8eNG6dPP/1UmzZtKrROamqqvv/+e7Vp00bHjx/XtGnTtGHDBu3YsUMNGzYstPzEiRM1adKkQuNvv/22goKCSveAAAAAABQrN08al3b23M0Lnc/I7uvZenJycnTXXXfp+PHjCg4OvuCyHj3jdDGioqJcQlaXLl3UsmVLvfrqq3rmmWcKLZ+QkKD4+Hjn46ysLDVq1EgxMTGWL055cDgcSk5OVnR0tPz9/T1dDtxE/7wfPfR+9ND70UPvRw+9X3n1MOf0GY1LWydJio2NUVCAZ+NIwdVoJeHRSkNDQ+Xr66vMzEyX8czMTIWHh5doG/7+/mrfvr327t1b5PN2u112u73I9SrSG7ui1QP30D/vRw+9Hz30fvTQ+9FD71fWPfQ3tvP25dng5M6xenRyiICAAHXs2FEpKSnOsfz8fKWkpLicVbqQvLw8ffvtt6pXr15ZlQkAAACgkvP4pXrx8fEaOnSoOnXqpM6dO2vWrFk6efKk4uLiJElDhgxRgwYNlJSUJEmaPHmyrr32WjVv3lzHjh3Tiy++qJ9++kn33nuvJw8DAAAAwJ+Yx4PTwIEDdejQIU2YMEEHDhxQu3bttHr1aucU4+np6fLx+d+Jsd9//13Dhw/XgQMHVKtWLXXs2FFffPGFWrVq5alDAAAAAPAn5/HgJEkjR47UyJEji3xu/fr1Lo9nzpypmTNnlkNVAAAAAHCWxz8AFwAAAAAqOoITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFggOAEAAACABYITAAAAAFioEMFp9uzZatKkiQIDAxUZGam0tLQSrbd48WLZbDb179+/bAsEAAAAUKl5PDgtWbJE8fHxSkxM1JYtW9S2bVvFxsbq4MGDF1xv//79Gjt2rLp161ZOlQIAAACorDwenGbMmKHhw4crLi5OrVq10ty5cxUUFKR58+YVu05eXp7+9re/adKkSWratGk5VgsAAACgMvLz5M5Pnz6tzZs3KyEhwTnm4+Ojnj17KjU1tdj1Jk+erLp16+qee+7RZ599dsF95ObmKjc31/k4KytLkuRwOORwOC7xCC5dQQ0VoRa4j/55P3ro/eih96OH3o8eer/y6qHDccZlnw6bKdP9WXHneD0anA4fPqy8vDyFhYW5jIeFhWn37t1FrrNx40a98cYb2rZtW4n2kZSUpEmTJhUaX7t2rYKCgtyuuawkJyd7ugRcAvrn/eih96OH3o8eej966P3Kuoe5eVJBBFmzZq3svmW6O0s5OTklXtajwcld2dnZGjx4sF577TWFhoaWaJ2EhATFx8c7H2dlZalRo0aKiYlRcHBwWZVaYg6HQ8nJyYqOjpa/v7+ny4Gb6J/3o4fejx56P3ro/eih9yuvHuacPqNxaeskSbGxMQoK8GwcKbgarSQ8WmloaKh8fX2VmZnpMp6Zmanw8PBCy//www/av3+/+vXr5xzLz8+XJPn5+WnPnj1q1qyZyzp2u112u73Qtvz9/SvUG7ui1QP30D/vRw+9Hz30fvTQ+9FD71fWPfQ3tvP25dng5M6xenRyiICAAHXs2FEpKSnOsfz8fKWkpCgqKqrQ8ldeeaW+/fZbbdu2zfnnlltu0Q033KBt27apUaNG5Vk+AAAAgErC45fqxcfHa+jQoerUqZM6d+6sWbNm6eTJk4qLi5MkDRkyRA0aNFBSUpICAwPVunVrl/Vr1qwpSYXGAQAAAKC0eDw4DRw4UIcOHdKECRN04MABtWvXTqtXr3ZOGJGe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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Optimal ccp_alpha: 0.0000\n",
            "Accuracy of the pruned tree with optimal ccp_alpha: 1.0000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "28. Write a Python program to train a Decision Tree Classifier and evaluate its performance using Precision,\n",
        "Recall, and F1-Score."
      ],
      "metadata": {
        "id": "Zzt5MrJn_7Av"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Train a Decision Tree Classifier\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Calculate Precision, Recall, and F1-Score for each class\n",
        "precision = precision_score(y_test, y_pred, average=None, labels=[0, 1, 2])\n",
        "recall = recall_score(y_test, y_pred, average=None, labels=[0, 1, 2])\n",
        "f1 = f1_score(y_test, y_pred, average=None, labels=[0, 1, 2])\n",
        "\n",
        "# Calculate average Precision, Recall, and F1-Score (macro average)\n",
        "precision_macro = precision_score(y_test, y_pred, average='macro')\n",
        "recall_macro = recall_score(y_test, y_pred, average='macro')\n",
        "f1_macro = f1_score(y_test, y_pred, average='macro')\n",
        "\n",
        "# Print the results\n",
        "print(\"Precision for each class: \", precision)\n",
        "print(\"Recall for each class: \", recall)\n",
        "print(\"F1-Score for each class: \", f1)\n",
        "print(\"\\nMacro-average Precision: \", precision_macro)\n",
        "print(\"Macro-average Recall: \", recall_macro)\n",
        "print(\"Macro-average F1-Score: \", f1_macro)\n",
        "\n",
        "# Calculate Accuracy\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"\\nAccuracy: \", accuracy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S65HR75jAAJo",
        "outputId": "7428b8ad-936f-4358-c8fa-ca9d982a94b9"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision for each class:  [1. 1. 1.]\n",
            "Recall for each class:  [1. 1. 1.]\n",
            "F1-Score for each class:  [1. 1. 1.]\n",
            "\n",
            "Macro-average Precision:  1.0\n",
            "Macro-average Recall:  1.0\n",
            "Macro-average F1-Score:  1.0\n",
            "\n",
            "Accuracy:  1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "29. Write a Python program to train a Decision Tree Classifier and visualize the confusion matrix using seaborn."
      ],
      "metadata": {
        "id": "gtXyeJvvAG5J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Train a Decision Tree Classifier\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "clf.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = clf.predict(X_test)\n",
        "\n",
        "# Calculate the confusion matrix\n",
        "cm = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Visualize the confusion matrix using seaborn heatmap\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=iris.target_names, yticklabels=iris.target_names)\n",
        "plt.title(\"Confusion Matrix for Decision Tree Classifier\")\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "2VyWj7HaATV7",
        "outputId": "4150f102-c4df-44a8-c6d5-0388700711e6"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "30. Write a Python program to train a Decision Tree Classifier and use GridSearchCV to find the optimal values\n",
        "for max_depth and min_samples_split."
      ],
      "metadata": {
        "id": "PixQiN0jAoTI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load the Iris dataset\n",
        "iris = load_iris()\n",
        "X = iris.data  # Features\n",
        "y = iris.target  # Target labels (species of iris)\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# Define the model\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "\n",
        "# Define the parameter grid for max_depth and min_samples_split\n",
        "param_grid = {\n",
        "    'max_depth': [3, 5, 10, None],  # Various values for max_depth\n",
        "    'min_samples_split': [2, 5, 10]  # Various values for min_samples_split\n",
        "}\n",
        "\n",
        "# Set up GridSearchCV to find the best parameters using cross-validation\n",
        "grid_search = GridSearchCV(estimator=clf, param_grid=param_grid, cv=5, scoring='accuracy', verbose=1)\n",
        "\n",
        "# Fit the model with GridSearchCV\n",
        "grid_search.fit(X_train, y_train)\n",
        "\n",
        "# Print the best parameters found by GridSearchCV\n",
        "print(\"Best parameters found by GridSearchCV:\", grid_search.best_params_)\n",
        "\n",
        "# Get the best model from the grid search\n",
        "best_clf = grid_search.best_estimator_\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = best_clf.predict(X_test)\n",
        "\n",
        "# Evaluate the performance of the best model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f\"Accuracy of the best model: {accuracy:.4f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vjosSILlAuM4",
        "outputId": "ca070f6f-07ac-4195-813e-d78f6c11dc8b"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fitting 5 folds for each of 12 candidates, totalling 60 fits\n",
            "Best parameters found by GridSearchCV: {'max_depth': 5, 'min_samples_split': 10}\n",
            "Accuracy of the best model: 1.0000\n"
          ]
        }
      ]
    }
  ]
}